
                      BUILD/INSTALL INSTRUCTIONS

First, note well that dieharder REQUIRES the Gnu Scientific Library
(GSL) and the Gnu Build Tools (GBT) for its build, and it is strongly
recommended that they be up to date versions.  This precludes building
or running dieharder on a truly old linux (or other) distribution.  In
practical terms, if your linux distribution is older than two years
(say, pre-FC 4) it is unlikely to build smoothly without signicant work.
For many of you reading this, then, my first instruction is "update to a
relatively modern build environment that contains a contemporary GSL".

Once this is done, the build SHOULD proceed easily enough.  Enter the
toplevel build directory and enter:

 ./autogen.sh

which should set up the GBT build.  If you skip this step, you may not
have the right/current versions of some of the files required by e.g.
automake, but on most systems just using the "usual" build starting
with the configure step will work.

Next, run

 ./configure --prefix=/usr

for a traditional FHS-compliant build and install, or enter a full path
such as:

 ./configure --prefix=$(HOME)/usr

for an alternative install into your own home directory.  

Finally, to just build the software in place, enter:

 make

or to build it and install it on the path defined in the configure step
above, enter:

 make install

This last step will need to be done as root if the install is into a
root-owned directory such as /usr and followed as noted by rerunning
ldconfig.

NOTE WELL:  Be aware that the application is DYNAMICALLY LINKED and will
not work unless the libdieharder library is installed and made available
to the dynamic linker by running ldconfig (for the FHS install) or the
use of

 LD_LIBRARY_PATH=$(HOME)/usr/lib
 export LD_LIBRARY_PATH

for a private one.  These commands are included in the file
set_ld_library_path in the tarball -- this should be sourced from your
bash via e.g. "source set_ld_library_path".  If you just build in the
source directory and try to run dieharder/dieharder it will not work
unless/until you set up the library path as noted.

                        RPM BUILD INSTRUCTIONS

There are two ways one should be able to build a functional set of RPMs
for the dieharder user interface application and libdieharder, the core
library of RNG testing routines.  The easiest, when it works, is to
download the source rpm and use

 rpmbuild --rebuild dieharder-whatever-src.rpm

where "whatever" should of course be the version of the source rpm you
seek to rebuild.  In order for this to work, you will need something
like the following in ~/.rpmmacros:

%_topdir	/home/rgb/Src/rpm_tree

# Don't do fascist build policy -- unpackaged files ignored.
%define _unpackaged_files_terminate_build 0

where the topdir macro should point to a valid RPM build tree.

Alternatively, once you have run the configure step above using
--prefix=/usr (only) you should be able to build the rpms using:

 make rpm

where once again a suitable rpm tree must exist and be pointed to in
.rpmmacros.


                   DEBIAN PACKAGE BUILD INSTRUCTIONS

Are pending, but are under active development and should appear in this
space soon.


