From ckarney@sarnoff.com Wed Sep 27 09:57:06 2006
Date: Wed, 27 Sep 2006 09:57:01 -0400
From: Charles Karney <ckarney@sarnoff.com>
To: Robert G. Brown <rgb@phy.duke.edu>
Subject: Dieharder: bugs, suggestion for test, min-distance proof

(1) Problems/bugs in tests.

I'm not sure I can help you much with operm5.  My background is more
physics than statistics and I am mainly interested in having a reliable
rng for Monte Carlo applications.  I must say I was dismayed to see the
failures of mt19937 in the dieharder suite.  I am left wondering whether
some of them are problems with the tests which have been "sharpened" by
your running more thorough tests or possibly by coding errors.

To take an example (mt19937 with RGB Bit Distribution Test n = 8)

  ./dieharder -g 12 -n 8 -r 3 -t 10000 -p 20

consistently reports failure.  The same test fails with a file of 8-bit
bytes constructed by taking leading 8 bits of each mt19937 word.  But
this would mean that the mt19937 uniform deviates in [0,1) were
non-random and I would expect to see problems all over the place as a
consequence.

I started delving into your code to figure out precisely how the test is
done.  It looks like you're messing up with boffset.  With

   boffset = t%ntuple_max;

in rgb_bitdist.c, get_bit_ntuple accesses its bit array with negative
indices.  Changing this to

   boffset = t%ntuple;

makes this test succeed!  (Perhaps this fix belongs in the definition of
get_bit_ntuple.)  The failures as the ntuple size increases might have
merely been the consequence of this overflow in get_bit_ntuple.

There appears to be a similar bug in the diehard_bitstream test.  First
of all, I would assume that the overlapped and non-overlapped statistics
were different (until proven otherwise!).  Then you seem to have a
blunder in the way you implement the overlapping obtaining a new random
number if (tsample%32 == 0) in diehard_bitstream.c.  (I.e., on every
iteration since tsample = 2^21.)  Presumably this should be if (t%32 ==
0).  Making this change, the POSSIBLY WEAK report on mt19937 becomes
PASSED.

In that case, I believe you need to implement Marsaglia's scheme more
faithfully.  Something along the lines of

 i = gsl_rng_get(rng);
 unsigned long long li = i;
 for(t=0;t<tsamples;t++){
   /* this presumes that rng has 32 bits of randomness! */
   if (t%32 == 0) {
     i = gsl_rng_get(rng);
     li |= ((unsigned long long)i)<<32;
   }
   j = li & 0xfffffUL;
   w[j]++;
   li >>= 1;
 }

should do it.  However you might want to use your get_bit_ntuple
machinery to deal with generators that provide fewer than 32 bits.

By the way, several GSL generators which don't yield a whole number of
bits.  You should use a rejection method to generate
floor(log2(max-min+1)) unbiased bits -- but I don't see you doing this.
Instead, you seem to include ceil(log2(max+1)) bits (in startup.c).
This will lead to a bias in the bits for those generators leading to the
likelihood of false positives on bit-oriented tests.

Anyway, it's worth looking critically at all the tests for which
dieharder reports weakness in the case of mt19937.  If you're not sure
about the soundness of some tests (e.g., in the case of some of
Marsaglia's tests for which the "right" answer is the result of an
ancient simulation), you probably should flag the results.  (I.e., say
that the test fails, but maybe the test is at fault.)

(2) Other dieharder misfeatures.

(a) Compiling dieharder on a 64-bit architecture gives lots of warning
    about converting pointers to ints.

(b) dieharder doesn't like a file of randoms of 2GB in length.  Perhaps
    you're storing file pointers in a 32-bit word.

(3) Another possible test.

Von Neumann has a way of computing the exponential distribution using
comparisons only.  See

    J. von Neumann,
    Various Techniques used in Connection with Random Digits,
    J. Res. Nat. Bur. Stand., Appl. Math. Ser. 12, 36-38 (1951),
    reprinted in Collected Works, Vol. 5, 768-770 (Pergammon,1963)

This is based on looking at generating decreasing runs in a sequence of
random numbers and stopping when the run length is odd.  Knuth also
discusses this method in TAOCP, Vol 2, Sec 3.4.1.C.3.

In C++, the code to do this is

double ExpDist(Random& r) {
  for (unsigned k = 0; ; ++k) {
    double x = r.Fixed(), p = x; // executed 1/(1-exp(-1)) times on average
    for (unsigned s = 1; ; s ^= 1) { // Parity of loop count
      double q = r.Fixed();     // executed exp(p) times on average
      if (q >= p)
        if (s)
          return double(k) + x;
        else
          break;
      p = q;
    }
  }
}

If r.Fixed() returns ih for h = 1/2^53 for i = [0,2^53), then you can
show that x is returned by this routine with probability h(1-h)^(x/h) ->
h exp(-x) for h -> 0.  Verifying that the results are indeed drawn from
this distribution would then test the properties of runs in a random
sequence.  r.Fixed() could be replaced by a routine that returns an
integer in [0,n) and the return statement changed to return k*n + x; and
you get a geometric distribution with probability 1/n.

Possibly the current run tests in dieharder are exhaustive enough.
However this test provides a nice encapsulation of the run properties.
It also lets you treat the discrete case exactly (instead of assuming
that your RNG is providing you with an infinite-precision real in
[0,1)).  Indeed it would be worth allowing the tests do be done e.g.,,
on 4-bit or 8-bit pieces of a random deviate.  Finally, to be
comprehensive you can modify ExpDist to work with increasing runs
instead of decreasing ones.  (Change the comparison to <= and return
double(k+1) - x - h;)

(4) More on minimum gap:

Here is a brief proof of the minimum gap for N points in a d-dimensional
torus.

Add N points one at a time to a d-dimensional unit torus and demand that
no point is within x of preceding ones.

Prob first one doesn't overlap = 1

Prob second one doesn't overlap = 1 - V[d] x^d

where V[d] = pi^(d/2)/gamma(d/2+1) is volume factor for d dimensional
ball.

Prob third one doesn't overlap = 1 - 2 V[d] x^d
etc...

Prob no overlap after N points
 = prod( (1 - (i-1) V[d] x^d), i, 1, N)      [for x^d N << 1 (*)]
 approx prod( exp(-(i-1) V[d] x^d), i, 1, N) [also for x^d N << 1]
 = exp(-V[d] x^d sum(i-1,i,1,N))
 = exp(-V[d] x^d N(N-1)/2)

Thus cumulative probability that the minimum separation is x is
approximately

  1 - exp(-V[d] x^d N(N-1)/2)

The cumulative probability for the special case d = 1 is exactly

  1 - (1 - N x)^(N-1)

(see arc covering article in Mathworld) which in the limit N -> inf
agrees with the general asymptotic result (with V[1] = 2).

* This condition means that a "gas" of spheres of radius is dilute.
  This limit enables the "packing" of the spheres to be ignored.  For
  x^d N ~ 1, we need to worry about how the non-overlapping spheres
  should be packed to allow as many as possible to be inserted.  Thus
  for the placement of the second sphere relative to the first may
  preclude a close packed arrangement for the third.  This means,
  presumably, that an exact treatment is difficult (because the
  d-dimensional packing problem is?)  In light of this, it's a little
  surprising that the (exact) 1-d result is so simple.  (Of course
  packing in 1-d is trivial.)

  Note that the approximation x^d N << 1 is justified because mean(x) ~
  1/N^(2/d) so x^d N ~ 1/N << 1 for N >> 1.

The analysis for a d-dimensional box (non-periodic) would go along the
same lines.  However, you would need to handle a boundary layer of
thickness x specially.  For N large the two results will be the same.

Probably the result with moderate N is closer to asymptotic result in
the case of a periodic system compared with a box with boundaries.
Indeed, Marsaglia's "30" for the 3d spheres test might be better for N =
4000 than my asymptotic result 375/(4*pi) because that test is done in a
non-periodic box.

Assuming that small periodic systems give results closer to the
asymptotic values, I would recommend converting 2d- and 3d- tests to
tori and generalizing to d-dimensions.

A couple of other notes about the minimum distance test:

(a) Change gsl_rng_uniform_pos(rng) to gsl_rng_uniform(rng) if treating
    a periodic box.

(b) For d large, you can exit the loop over dimensions as soon as the
    partial distance squared exceeds the current minimum.  (This would
    result is executing the loop over dimensions 1 + epsilon times on
    average.)

-- 
Charles Karney <ckarney@sarnoff.com>
Sarnoff Corporation, Princeton, NJ 08543-5300

URL: http://charles.karney.info
Tel: +1 609 734 2312
Fax: +1 609 734 2662
