From davis@space.mit.edu Mon Mar  3 23:53:45 2008
Date: Mon, 3 Mar 2008 23:53:44 -0500
From: John E. Davis <davis@space.mit.edu>
To: rgb@phy.duke.edu
Subject: dieharder rgb_bitdist patch and bug fix


Hi Robert,

First I want to thank your for your work on dieharder.  Those of us
who make their living running monte-carlo simulations know how
important good quality random number generators are, and really
appreciate tools such as dieharder.

I am in the process of testing a new random number generator. On my
machine, the time required to run the RGB Bit Distribution Test jumps
from about 10 minutes for 11-bit ntuples to more than 90 minutes for
12-bit ntuples.  After browsing the source code for a day, I made some
changes that brought the time for the 12-bit samples down to under 7
minutes.  The changes are described below.

In looking at the source code, I noticed that `m' in the diehard_sums
function is not initialized.  Perhaps this is why you noticed problems
with this routine, as described by your comments in the code.  I think
that it should be initialized to:

    m = test[0]->tsamples;

Getting back to rgb_bitdist, I noticed that nearly all the calls to
get_rand_bits use a `uint' for the `rsize' value.  So I wrote a custom
routine to return a specified number of non-overlapping bits from the
bit stream.  Of course my function uses all `rmax_bits' from a
generator and saves what is not needed for the next call.  This way
all the bits are used and in the order generated.  I assume that this
is all that is required.

Here is that function:

static uint my_get_rand_bits_uint (uint nbits, uint mask, gsl_rng *rng)
{
   static uint bit_buffer;
   static uint bits_left_in_bit_buffer = 0;
   uint bits;

   if (bits_left_in_bit_buffer >= nbits)
     {
	bits_left_in_bit_buffer -= nbits;
	bits = (bit_buffer >> bits_left_in_bit_buffer);
	return bits & mask;
     }

   nbits = nbits - bits_left_in_bit_buffer;
   bits = bit_buffer << nbits;
   while (1)
     {
	bit_buffer = gsl_rng_get (rng);
	bits_left_in_bit_buffer = rmax_bits;
	if (bits_left_in_bit_buffer >= nbits)
	  {
	     bits_left_in_bit_buffer -= nbits;
	     bits |= (bit_buffer >> bits_left_in_bit_buffer);
	     return bits & mask;
	  }
	nbits -= bits_left_in_bit_buffer;
	bits |= (bit_buffer << nbits);
     }
}

Note that the second parameter of the function is `mask'.  This gets
computed in the calling routine and depends upon the number of bits
required.  For nbits it is ((1 << nbits) - 1).  So if 4 bits are
required, mask = 15.

The biggest difference to the speed was made by noticing that in the
loop creating the vtest[i].x histograms, that count[i] is almost
always 0.  This resulted in 

      vtest[i].x[0]++;

getting executed many, many times causes cache misses.  Rather than
this, I preinitialized vtest[i].x[0] for all i to test[0].tsamples
outside the main for loop over the samples.  Then in the histogram
loop, I decrement vtest[i].x[0] whenever count[i] is non-zero. So,
instead of (comments and the DEBUG statements deleted for clarity):

 for(t=0;t<test[0]->tsamples;t++){

   memset(count,0,value_max*sizeof(uint));

   for(b=0;b<bsamples;b++){

     get_rand_bits(&value,sizeof(uint),nb,rng);
     count[value]++;
   }

   ctotal = 0;
   for(i=0;i<value_max;i++){
     vtest[i].x[count[i]]++;
     ctotal += count[i];
   }
 }

I used this:

 memset(count,0,value_max*sizeof(uint));
 for(t=0;t<tsamples;t++){
    
   for(b=0;b<bsamples;b++){
     value = my_get_rand_bits_uint (nb, mask, rng);
     count[value]++;
   }

   ctotal = 0;
   for(i=0;i<value_max;i++){
      uint count_i = count[i];
      if (count_i)
	{
	   count[i] = 0;		       /* performs memset */
	   ctotal += count_i;
	   vtest[i].x[count_i]++;
	   vtest[i].x[0]--;
	}
   }
 }

Note that I was able to pull the memset outside the for loop since
count[i] gets explictly set to 0 in the histogram loop.

Here are the diffs with respect to the version in 2.24.7.  I hope that
you find them useful and that I did not break anything.  I am
particularly interested in any feedback that you may have regarding
the my_get_rand_bits_uint function.  Thanks, --John

--- rgb_bitdist.c.orig	2008-03-03 23:31:48.767542000 -0500
+++ rgb_bitdist.c	2008-03-03 23:43:37.535618000 -0500
@@ -57,6 +57,36 @@
 
 #include <dieharder/libdieharder.h>
 
+inline static uint my_get_rand_bits_uint (uint nbits, uint mask, gsl_rng *rng)
+{
+   static uint bit_buffer;
+   static uint bits_left_in_bit_buffer = 0;
+   uint bits;
+
+   if (bits_left_in_bit_buffer >= nbits)
+     {
+	bits_left_in_bit_buffer -= nbits;
+	bits = (bit_buffer >> bits_left_in_bit_buffer);
+	return bits & mask;
+     }
+
+   nbits = nbits - bits_left_in_bit_buffer;
+   bits = bit_buffer << nbits;
+   while (1)
+     {
+	bit_buffer = gsl_rng_get (rng);
+	bits_left_in_bit_buffer = rmax_bits;
+	if (bits_left_in_bit_buffer >= nbits)
+	  {
+	     bits_left_in_bit_buffer -= nbits;
+	     bits |= (bit_buffer >> bits_left_in_bit_buffer);
+	     return bits & mask;
+	  }
+	nbits -= bits_left_in_bit_buffer;
+	bits |= (bit_buffer << nbits);
+     }
+}
+
 void rgb_bitdist(Test **test,int irun)
 {
 
@@ -65,6 +95,7 @@
  uint value_max;   /* 2^{nb}, basically (max size of nb bit word + 1) */
  uint bsamples;    /* The number of non-overlapping samples in buffer */
  uint value;       /* value of sampled ntuple (as a uint) */
+ uint mask;
 
  /* Look for cruft below */
 
@@ -133,13 +164,17 @@
    printf("# rgb_bitdist():            vtest table\n");
    printf("# rgb_bitdist(): Outcome   bit          x           y       sigma\n");
  }
+   
+ tsamples = test[0]->tsamples;
+ mask = ((1u << nb) - 1);
+
  for(i=0;i<value_max;i++){
    Vtest_create(&vtest[i],bsamples+1,"rgb_bitdist",gsl_rng_name(rng));
    for(b=0;b<=bsamples;b++){
      if(i==0){
        pbin = gsl_ran_binomial_pdf(b,ntuple_prob,bsamples);
        vtest[i].x[b] = 0.0;
-       vtest[i].y[b] = test[0]->tsamples*pbin;
+       vtest[i].y[b] = tsamples*pbin;
      } else {
        vtest[i].x[b] = 0.0;
        vtest[i].y[b] = vtest[0].y[b];
@@ -148,6 +183,7 @@
        printf("# rgb_bitdist():  %3u     %3u   %10.5f  %10.5f\n",
          i,b,vtest[i].x[b],vtest[i].y[b]);
      }
+     vtest[i].x[0] = tsamples;
    }
    MYDEBUG(D_RGB_BITDIST){
      printf("# rgb_bitdist():=====================================================\n");
@@ -160,13 +196,13 @@
   * with the bitcount as an index as a trial that generated that
   * bitcount.
   */
- for(t=0;t<test[0]->tsamples;t++){
+ memset(count,0,value_max*sizeof(uint));
+ for(t=0;t<tsamples;t++){
 
    /*
     * Clear the count vector for this sample.
     */
-   memset(count,0,value_max*sizeof(uint));
-
+    
    for(b=0;b<bsamples;b++){
 
      /*
@@ -175,7 +211,7 @@
       * skipping bits.  Then increment the count of this ntuple value's
       * occurrence out of bsamples tries.
       */
-     get_rand_bits(&value,sizeof(uint),nb,rng);
+     value = my_get_rand_bits_uint (nb, mask, rng);
      count[value]++;
 
      MYDEBUG(D_RGB_BITDIST) {
@@ -190,10 +226,16 @@
     */
    ctotal = 0;
    for(i=0;i<value_max;i++){
-     vtest[i].x[count[i]]++;
-     ctotal += count[i];
-     MYDEBUG(D_RGB_BITDIST){
-       printf("# rgb_bitdist(): vtest[%u].x[%u] = %u\n",i,count[i],(uint)vtest[i].x[count[i]]);
+      uint count_i = count[i];
+      if (count_i)
+	{
+	   count[i] = 0;		       /* performs memset */
+	   ctotal += count_i;
+	   vtest[i].x[count_i]++;
+	   vtest[i].x[0]--;
+	}
+      MYDEBUG(D_RGB_BITDIST){
+	 printf("# rgb_bitdist(): vtest[%u].x[%u] = %u\n",i,count[i],(uint)vtest[i].x[count[i]]);
      }
    }
    MYDEBUG(D_RGB_BITDIST){
