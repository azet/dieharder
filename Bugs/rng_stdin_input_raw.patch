diff -uprN dieharder-2.24.7.orig/include/dieharder/add_lib_rngs.h dieharder-2.24.7/include/dieharder/add_lib_rngs.h
--- dieharder-2.24.7.orig/include/dieharder/add_lib_rngs.h	2007-12-06 13:49:04.000000000 -0600
+++ dieharder-2.24.7/include/dieharder/add_lib_rngs.h	2008-08-11 00:26:11.509862830 -0500
@@ -37,6 +37,7 @@
  GSL_VAR const gsl_rng_type *gsl_rng_r_knuth_taocp;	/* edd May 2007 */
  GSL_VAR const gsl_rng_type *gsl_rng_r_knuth_taocp2;	/* edd May 2007 */
  GSL_VAR const gsl_rng_type *gsl_rng_uvag;	        /* rgb June 2007 */
+ GSL_VAR const gsl_rng_type *gsl_rng_stdin_input_raw;
 
  /*
   * rng global vectors and variables for setup and tests.
diff -uprN dieharder-2.24.7.orig/libdieharder/add_lib_rngs.c dieharder-2.24.7/libdieharder/add_lib_rngs.c
--- dieharder-2.24.7.orig/libdieharder/add_lib_rngs.c	2007-12-06 13:49:02.000000000 -0600
+++ dieharder-2.24.7/libdieharder/add_lib_rngs.c	2008-08-11 00:26:11.509862830 -0500
@@ -59,5 +59,8 @@ void add_lib_rngs()
  types[i] = (gsl_rng_uvag);
  if(verbose) printf("# add_my_types():  Added type %d = %s\n",i,types[i]->name);
  i++;
+ types[i] = (gsl_rng_stdin_input_raw);
+ if(verbose) printf("# add_my_types():  Added type %d = %s\n",i,types[i]->name);
+ i++;
  
 }
diff -uprN dieharder-2.24.7.orig/libdieharder/rng_stdin_input_raw.c dieharder-2.24.7/libdieharder/rng_stdin_input_raw.c
--- dieharder-2.24.7.orig/libdieharder/rng_stdin_input_raw.c	1969-12-31 18:00:00.000000000 -0600
+++ dieharder-2.24.7/libdieharder/rng_stdin_input_raw.c	2008-08-11 00:26:52.314106719 -0500
@@ -0,0 +1,50 @@
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <dieharder/libdieharder.h>
+
+/*
+ * This is a wrapping of stdin.
+ */
+
+static unsigned long int stdin_input_raw_get (void *vstate);
+static double stdin_input_raw_get_double (void *vstate);
+static void stdin_input_raw_set (void *vstate, unsigned long int s);
+
+static unsigned long int
+stdin_input_raw_get (void *vstate)
+{
+  unsigned int j;
+  if (fread(&j,sizeof(j),1,stdin) != 1) {
+      if (feof(stdin)) {
+          fprintf(stderr,"# stdin_input_raw(): Error: EOF\n");
+      } else {
+          fprintf(stderr,"# stdin_input_raw(): Error: %s\n", strerror(errno));
+      }
+      exit(0);
+  }
+  return j;
+}
+
+static double
+stdin_input_raw_get_double (void *vstate)
+{
+  return stdin_input_raw_get(vstate) / (double)UINT_MAX;
+}
+
+static void
+stdin_input_raw_set (void *vstate, unsigned long int s)
+{
+    /* empty */
+}
+
+static const gsl_rng_type stdin_input_raw_type =
+{"stdin_input_raw",             /* name */
+ UINT_MAX,                      /* RAND_MAX */
+ 0,                             /* RAND_MIN */
+ 0,
+ stdin_input_raw_set,
+ stdin_input_raw_get,
+ stdin_input_raw_get_double};
+
+const gsl_rng_type *gsl_rng_stdin_input_raw = &stdin_input_raw_type;
