<center><H1>DieHarder: A Random Number Test Suite</H1></center>

<center><H3>by Robert G. Brown (rgb)</H3></center>

<center><H2>Current: dieharder Version 0.5.3</H2></center>

<p>At the suggestion of Linas Vepstas on the Gnu Scientific Library
(GSL) list this GPL'd suite of random number tests will be named
"DieHarder".  Using a movie sequel pun for the name is a double tribute
to George Marsaglia, whose <a
href="http://stat.fsu.edu/~geo/diehard.html">"Diehard battery of
tests"</a> of random number generators has enjoyed years of enduring
usefulness as a test suite.</p>

<p>The DieHarder suite is more than just the diehard tests cleaned up
and given a pretty GPL source face in native C.  Tests from the <a
href="http://csrc.nist.gov/rng/">Statistical Test Suite (STS)</a>
developed by the National Institute for Standards and Technology (NIST)
are being incorporated, as are new tests developed by rgb.  Where
possible or appropriate, <i>all</i> tests that can be parameterized
("cranked up") to where failure, at least, is unambiguous are so
parameterized and controllable from the command line.</p>

<p>Note well that extensible DieHarder is intended to be the "Swiss Army
Knife of random number test suites", or if you prefer, "the last suite
you'll ever wear".  If that <i>last</i> pun isn't enough motivation for
any serious researcher that consumes lots of random numbers to give it a
try, then nothing is...</p>

<hr>

<center><h2><a href="./dieharder">DieHarder Download
Area</a></h2></center>

<p> All dieharder source (.tgz and .src.rpm) files can be downloaded
from this directory.  In addition, i386 binary rpm's built on top of
Fedora Core 2 are present (that require that the GSL rpm's be
installed) as well.</p>

<p> This project is under very active development.  Some effort will be
expended from here on so that the suite will "run out of the box".  A
brief synopsis of command options to get you started as presented
below.</p>

<p> Note well that this project is under active development.
Documentation (including this page and built in documentation) may lag
the bleeding edge snapshot by a few days or more.</p>

<hr>

<h2>About DieHarder</h2>

<p>The primary point of DieHarder (like Diehard before it) is to make it
easy to time and test (pseudo)random number generators, both software
and hardware for a variety of purposes in research and cryptography.
The tool is built entirely on top of the GSL's random number generator
interface and uses a variety of other GSL tools (e.g.  sort, erfc,
incomplete gamma, distribution generators) in its operation.  Three
examples are provided of wrapping a random number generator (including
the entropy-based /dev/random and /dev/urandom available on many linux
systems) and inserting it so that it is can be called via the GSL
interface, and it is strongly suggested that any random number generator
to be tested by provided with such an interface.</p>

<p>An file interface (still consistent with the GSL to the extent
possible) is planned that would allow random numbers to be read in from
a file, allowing the tool to be used with any generator (directly
wrappable or not) that can generate a table of random numbers, but this
will place severe limits on some of the tests, which can require very
large numbers of random numbers.  In this respect, DieHarder differs
significantly from Diehard, which used file based sources of random
numbers exclusively.</p>

<p>The development of DieHarder was motivated by the following, in
rough order of importance:<p>

<ul>

<li> To provide a <b>readily available, rpm-installable toolset</b> so
that "consumers" of random numbers (who typically use large numbers of
random numbers in e.g. simulation or other research) can test the
generator(s) they are using to verify their quality.

<li> To provide a very <b>simple user interface</b> for that toolset for
random number consumers.

<li> To provide lots of <b>lots of knobs and dials</b> and low level
control for statistical researchers that want to study particular
generators with particular tests in more detail.

<li> To have the entire test code and documentation be fully <b>Gnu
Public Licensed</b> and hence openly available for adaptation, testing,
comment, and modification so that the testing suite itself becomes
reliable.

<li> To provide a fairly <b>simple API</b> for adding new tests with a
common set of low-level testing tools and a <b>common test structure</b>
that leads (one hopes) to an <i>unambiguous</i> decision to accept or
reject any given random number generator on the basis of any given test
for a suitable choice of controllable test parameters.

<li> To allow all researchers to be able to directly test, in
particular, the <b>random number generators interfaced with the GSL</b>.
This is a deliberate design decision justified by the extremely large
and growing number of random number generators prebuilt into the GSL and
the ease of adding new ones (either contributing them to the project or
for the sole purpose of local testing).

<li> To allow researchers that use e.g. <i>distributions</i> directly
generated by GSL random distribution generation routines (which can in
principle fail two ways, due to the failure of the underlying random
number generator or due to a failure of the generating algorithm) to be
able to directly validate their particular generator/distribution
combination, where possible.

</ul>

<p>Note well that the primary objections I have towards diehard and sts
are not that they are or are not adequate and complete; it is that the
code itself is not properly packaged for reuse, testing, and extension.
DieHarder will hopefully rectify this situation and make it extremely
easy for anybody to test random numbers on any GSL-supported
platform.</p>

<p>Although this tool is being developed on Linux/GCC-based platforms,
it should port with no particular difficulty to other Unices, especially
ones that support RPMs.  No particular effort is being expended at this
time to make it run on Windows based compute platforms (due to a lack of
availability of such platforms and compilers to rgb) but there is no
reason to think that such a port would be terribly difficult.</p>

<h2>Essential Usage Synopsis</h2>

<p>If you compile the test or install the provided binary rpm's and run
it as:</p>

<tt>dieharder -a</tt>

<p>it should run -a(ll) tests on the default GSL generator.</p>

<p>Choose alternative tests with -g number where</p>

<tt>dieharder -g 0</tt>

<p>will list all possible numbers known to the current snapshot of the
DieHarder (mostly from the GSL).</p>

<tt>dieharder -l</tt>

<p>should list all the tests implemented in the current snapshop of
DieHarder.  Finally, the venerable and time tested:</p>

<tt>dieharder -h</tt>

<p> provides a Usage synopsis (which can quite long) and</p>

<tt>man dieharder</tt>

<p>is the (installed) man page, which may or many not be completely up
to date as the suite is under active development.  For developers,
additional documentation is available in the toplevel directory or doc
subdirectory of the source tree.  Eventually, a complete DieHard manual
in printable PDF form will be available both on this website and in
/usr/share/doc/dieharder-*/.</p>

<h2>List of Tests/Comments</h2>

<p> The following list of tests is probably not up to date.  It is
included to give you some minimal idea of what the suite can already
test.  The revision number X.Y.Z is connected to the supported test
schema in the following way.  Major milestones in the test development
will cause bumps in X.  Major structural rewrites (e.g.  altering the
entire encapsulation scheme for tests or the fundamental KS test code
used to validate all the tests) will bump Y.  Adding a new test will
bump Z, and Z will be kept equal to the number of supported tests at all
times (so bumping X or Y may have no effect on Z).  Bugfix releases will
bump Z by .01, e.g. 0.5.8 might become 0.5.81.</p>

<p>Full descriptions of the following tests are available from within
the tool and source documentation.  All tests are completely and
independently rewritten from their description alone, and may be
functionally modified or extended relative to the original source code
published in the originating suite.  The author (rgb) bears complete
responsibility for these changes, subject to the standard GPL code
disclaimer (in essence, yes it's my fault if they don't work but using
the tool is at your own risk)</p>

<ul>

<li> <b>Diehard: Knuth "runs" test</b>

<li> <b>Diehard: Poissonian "Birthdays" test</b>

<li> <b>Diehard: (2d) Minimum Distance test (2dspheres)</b>

<li> <b>Diehard: (3d) Minimum Distance test (3dspheres)</b>

<li> <b>rgb: Bitmask test</b>

<li> <b>rgb: Bitwise n-tuple distribution test</b>

<li> <b>STS: Monobit test</b>

<li> <b>STS: Runs test (counts runs of 0's and 1's)</b>

</ul>

<h2>Development Notes</h2>

<p>All tests are currently using the x.5.x test encapsulation and
underlying KS and chisq tests.  I'm in the process of completing the
transition to the new DieHarder design and adding the rest of Diehard as
fast as I can rewrite them in the standard test encapsulation.  Some of
them will likely require extension of the underlying tools, e.g.
covariance matrix to p-value, that I'm hoping is facilitated by the
GSL.</p>

<h2>Thoughts for the Future/Wish List/To Do</h2>

<ul>

<li> Tests of GSL distribution generators. 

<li> Anderson-Darling KS test.

<li> Covariance matrix to p-value (required by various Diehard tests).

<li> STS binning of final p-value sampling to determine uniformity
(alternative to KS test).

<li> New tests, compressions of existing ones that are "different" but
really the same.  Hyperplane tests.  Spectral tests.

<li> Collaborators.  Co-developers welcome, as are contributions from
users.

</ul>

<h2>Conclusions</h2>

<p>I hope that even during development, you find dieharder useful.  If
you have any interest in participating in its development, be sure to
let me know, especially if you have decent coding skills and a basic
knowledge of statistics.  I have documents to help with the latter, if
you have the programming skills and want to LEARN statistics.</p>

<p>Submit bug reports, etc. to</p>
<address>
  <a href="mailto:rgb@phy.duke.edu">rgb@phy.duke.edu</a> 
</address>
