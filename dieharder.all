
#==================================================================
#                Diehard "runs" test (modified).
# This tests the distribution of increasing and decreasing runs
# of integers.  If called with reasonable parameters e.g. -s 100
# or greater and -n 100000 or greater, it will compute a vector
# of p-values for up and down and verify that the proportion
# of these values less than 0.01 is consistent with a uniform
# distribution.
#==================================================================
# Random number generator tested: mt19937_1999
# size of vector tested = 100000 (100000 or more suggested)
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |****|****|    |    |    |    |    |
#     |    |****|    |****|****|    |    |    |    |    |
#   18|    |****|    |****|****|    |    |    |    |    |
#     |    |****|****|****|****|    |    |    |    |    |
#   16|    |****|****|****|****|    |    |    |    |    |
#     |****|****|****|****|****|    |    |    |    |    |
#   14|****|****|****|****|****|    |    |    |    |    |
#     |****|****|****|****|****|    |    |    |    |    |
#   12|****|****|****|****|****|    |    |    |    |    |
#     |****|****|****|****|****|    |    |    |    |    |
#   10|****|****|****|****|****|    |    |    |    |    |
#     |****|****|****|****|****|    |    |    |    |    |
#    8|****|****|****|****|****|    |    |    |    |    |
#     |****|****|****|****|****|    |    |    |    |    |
#    6|****|****|****|****|****|****|    |    |    |    |
#     |****|****|****|****|****|****|    |    |    |    |
#    4|****|****|****|****|****|****|    |    |    |    |
#     |****|****|****|****|****|****|    |    |    |    |
#    2|****|****|****|****|****|****|    |    |    |    |
#     |****|****|****|****|****|****|    |    |    |    |
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p = 0.120567 for diehard_runs test from Kuiper Kolmogorov-Smirnov
#     test on 200 pvalues (up runs + down runs).

#==================================================================
#                Diehard "Birthdays" test (modified).
# Each test determines the number of matching intervals from 512
# "birthdays" (by default) drawn on a 24-bit "year" (by
# default).  This is repeated 100 times (by default) and the
# results cumulated in a histogram.  Repeated intervals should be
# distributed in a Poisson distribution if the underlying generator
# is random enough, and a a chisq and p-value for the test are
# evaluated relative to this null hypothesis.
#
# In the original diehard test, 9 different "windows" 24 bits
# wide were sampled in this way for a single data set, and
# the 9 p-values thus obtained subjected to a Kolmogorov-Smirnov (KS)
# test.  However, values drawn from these windows only differ by a
# single bit.  The samples in this version of the test are
# completely independent but are still selected from a (random)
# offset within each integer tested, with a periodic boundary
# condition.  Many more p-values are accumulated in this way before
# performing the final KS test. It is therefore stronger than the
# original test (I think).   At any rate, it brings otherwise strong
# generators to their metaphorical knees at -t 200.
#
# It is recommended that you run this at or near the original
# 100 test samples per p-value with -t 100.
#==================================================================
# Random number generator tested: mt19937_1999
# 512 samples drawn from 24-bit integers masked out of a
# 32 bit random integer.  lambda = 2.000000, kmax = 6, tsamples = 100
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |****|    |    |    |    |    |
#   16|    |    |    |    |****|    |    |    |    |    |
#     |    |    |    |    |****|    |    |    |    |    |
#   14|    |    |    |    |****|    |****|    |    |    |
#     |    |    |    |    |****|    |****|    |    |    |
#   12|    |    |    |    |****|****|****|    |    |    |
#     |****|    |    |    |****|****|****|    |    |    |
#   10|****|    |    |    |****|****|****|    |    |    |
#     |****|****|    |    |****|****|****|    |    |    |
#    8|****|****|****|    |****|****|****|    |****|****|
#     |****|****|****|    |****|****|****|****|****|****|
#    6|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p = 0.337950 for diehard_birthdays test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
#==================================================================
#         Diehard "Minimum Distance" test (modified).
# Generate 8000 points in a 10000^2 square.  Determine the
# the shortest nearest neighbor distance R.  This should generate
# p = 1.0 - exp(-R^2/0.995).  Repeat for lots of samples, apply a
# KS test to see if p is uniform.
#==================================================================
# Random number generator tested: mt19937_1999
# Number of points tested = 8000
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   16|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   14|    |    |    |    |    |    |    |****|    |    |
#     |    |    |    |    |****|    |    |****|    |    |
#   12|    |    |    |    |****|****|    |****|    |    |
#     |    |****|****|    |****|****|    |****|    |    |
#   10|    |****|****|    |****|****|    |****|    |    |
#     |****|****|****|****|****|****|    |****|    |    |
#    8|****|****|****|****|****|****|    |****|****|****|
#     |****|****|****|****|****|****|    |****|****|****|
#    6|****|****|****|****|****|****|    |****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p = 0.982483 for diehard_2dsphere test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
#==================================================================
#              Diehard "3d Sphere" test (modified).
# Generate 4000 points in a 1000^3 integer cube.  Determine the
# the shortest nearest neighbor distance R.  This should generate
# p = 1.0 - exp(-R^3/30).  Repeat for lots of samples, apply a
# KS test to see if p is uniform.
#==================================================================
# Random number generator tested: mt19937_1999
# Number of points tested = 4000
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   16|    |    |    |    |    |    |    |    |    |****|
#     |    |    |    |    |    |    |    |    |    |****|
#   14|    |    |    |    |    |    |    |    |    |****|
#     |    |    |    |    |    |    |****|    |    |****|
#   12|    |    |    |    |    |    |****|    |    |****|
#     |****|    |    |    |    |    |****|    |****|****|
#   10|****|    |    |    |    |    |****|****|****|****|
#     |****|    |    |    |    |****|****|****|****|****|
#    8|****|    |    |****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    6|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p = 0.227985 for diehard_2dsphere test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.

#==================================================================
#              Diehard 32x32 "Binary Rank" test
# This is the BINARY RANK TEST for 31x31 matrices. The leftmost 
# 31 bits of 31 random integers from the test sequence are used 
# to form a 31x31 binary matrix over the field {0,1}. The rank  
# is determined. That rank can be from 0 to 31, but ranks< 28   
# are rare, and their counts are pooled with those for rank 28. 
# Ranks are found for (default) 40,000 such random matrices and
# a chisquare test is performed on counts for ranks 31,30,29 and
# <=28.
#
# As always, the test is repeated and a KS test applied to the
# resulting p-values to verify that they are approximately uniform.
#==================================================================
# Random number generator tested: mt19937_1999
# Number of 32x32 random matrices tested = 10000
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |****|    |    |    |
#   16|    |    |    |    |    |    |****|    |    |    |
#     |    |    |    |    |    |    |****|    |    |    |
#   14|    |    |****|    |    |    |****|    |    |    |
#     |    |    |****|    |****|    |****|    |    |    |
#   12|    |    |****|    |****|    |****|    |    |    |
#     |    |****|****|    |****|    |****|    |    |    |
#   10|    |****|****|    |****|    |****|    |    |    |
#     |    |****|****|****|****|    |****|    |****|    |
#    8|****|****|****|****|****|    |****|    |****|    |
#     |****|****|****|****|****|    |****|    |****|****|
#    6|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p = 0.363758 for diehard 32x32 binary rank test from 
#     Kuiper Kolmogorov-Smirnov test on 100 pvalues.

#==================================================================
#             Diehard 6x8 "Binary Rank" test
# This is the BINARY RANK TEST for 6x8 matrices.  From each of
# six random 32-bit integers from the generator under test, a
# specified byte is chosen, and the resulting six bytes form a
# 6x8 binary matrix whose rank is determined.  That rank can be
# from 0 to 6, but ranks 0,1,2,3 are rare; their counts are
# pooled with those for rank 4. Ranks are found for 100,000
# random matrices, and a chi-square test is performed on
# counts for ranks 6,5 and <=4.
#
# As always, the test is repeated and a KS test applied to the
# resulting p-values to verify that they are approximately uniform.
#==================================================================
# Random number generator tested: mt19937_1999
# Number of random 6x8 bitwise matrices tested = 10000
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   16|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   14|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |****|    |    |    |
#   12|****|    |****|    |    |    |****|****|    |    |
#     |****|    |****|    |    |    |****|****|    |    |
#   10|****|****|****|****|****|    |****|****|    |    |
#     |****|****|****|****|****|    |****|****|    |    |
#    8|****|****|****|****|****|****|****|****|    |    |
#     |****|****|****|****|****|****|****|****|****|    |
#    6|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p = 0.996454 for diehard 6x8 binary rank test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
#==================================================================
#                        rgb_persist
# This test generates 256 sequential samples of an random unsigned
# integer from the given rng.  Successive integers are logically
# processed to extract a mask with 1's whereever bits do not
# change.  Since bits will NOT change when filling e.g. unsigned
# ints with 16 bit ints, this mask logically &'d with the maximum
# random number returned by the rng.  All the remaining 1's in the
# resulting mask are therefore significant -- they represent bits
# that never change over the length of the test.  These bits are
# very likely the reason that certain rng's fail the monobit
# test -- extra persistent e.g. 1's or 0's inevitably bias the
# total bitcount.  In many cases the particular bits repeated
# appear to depend on the seed.  If the -i flag is given, the
# entire test is repeated with the rng reseeded to generate a mask
# and the extracted mask cumulated to show all the possible bit
# positions that might be repeated for different seeds.
#==================================================================
# Results for mt19937_1999 rng, using its 32 valid bits:
# (Cumulated mask of zero is good.)
# cumulated_mask =          0 = 00000000000000000000000000000000
# randm_mask     = 4294967295 = 11111111111111111111111111111111
# random_max     = 4294967295 = 11111111111111111111111111111111
# rgb_persist test PASSED (no bits repeat)
#==================================================================
#                 rgb_bitdist Test Description
# Accumulates the frequencies of all n-tuples of bits in a list
# of random integers and compares the distribution thus generated
# with the theoretical (binomial) histogram, forming chisq and the
# associated p-value.  In this test n-tuples are selected without
# WITHOUT overlap (e.g. 01|10|10|01|11|00|01|10) so the samples
# are independent.  Every other sample is offset modulus of the
# sample index and ntuple_max.
#==================================================================
# random number generator: mt19937_1999
# p-samples = 100   bitstring samples = 10000  bits sampled = 128
ntuple = 0
p =  0.012 for 1-tuplet test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
p =  0.974 for 2-tuplet test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
p =  0.164 for 3-tuplet test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
p =  0.289 for 4-tuplet test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
p =  0.775 for 5-tuplet test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
p =  0.000 for 6-tuplet test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
# Generator mt19937_1999 FAILS at 0.01% for 6-tuplets.  rgb_bitdist terminating.
#==================================================================
#                 sts_monobit Test Description
# Very simple.  Counts the 1 bits in a long string of random uints.
# Compares to expected number, generates a p-value directly from
# erfc().  Very effective at revealing overtly weak generators;
# Not so good at determining where stronger ones eventually fail.
#==================================================================
# random number generator: mt19937_1999
# p-samples = 100   number of sampled ints/test = 10000
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   16|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   14|****|    |    |    |    |    |    |    |    |    |
#     |****|    |    |    |****|    |    |    |****|    |
#   12|****|****|    |    |****|    |    |    |****|    |
#     |****|****|    |    |****|    |    |    |****|    |
#   10|****|****|****|    |****|    |****|    |****|    |
#     |****|****|****|    |****|****|****|    |****|    |
#    8|****|****|****|    |****|****|****|    |****|    |
#     |****|****|****|    |****|****|****|****|****|****|
#    6|****|****|****|    |****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p =  0.843 for sts_monobit test from Kuiper Kolmogorov-Smirnov.
#     test on 100 pvalues.
#==================================================================
#                    sts_runs Test Description
# Counts the total number of 0 runs + total number of 1 runs across
# a sample of bits.  Note that a 0 run must begin with 10 and end
# with 01.  Note that a 1 run must begin with 01 and end with a 10.
# This test, run on a bitstring with cyclic boundary conditions, is
# absolutely equivalent to just counting the 01 + 10 bit pairs.
# It is therefore totally redundant with but not as good as the
# rgb_bitdist() test for 2-tuples, which looks beyond the means to the
# moments, testing an entire histogram  of 00, 01, 10, and 11 counts
# to see if it is binomially distributed with p = 0.25.
#==================================================================
# random number generator: mt19937_1999
# p-samples = 100   number of sampled ints/test = 10000
#==================================================================
#                Histogram of p-values
# Counting histogram bins, binscale = 0.100000
#   20|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   18|    |    |    |    |    |    |    |    |    |    |
#     |    |    |    |    |    |    |    |    |    |    |
#   16|    |    |    |    |    |    |    |    |    |    |
#     |****|    |    |    |    |    |    |    |    |    |
#   14|****|****|    |    |    |    |    |    |****|    |
#     |****|****|    |    |    |    |    |    |****|    |
#   12|****|****|    |    |    |    |    |****|****|    |
#     |****|****|    |    |    |    |    |****|****|    |
#   10|****|****|    |    |    |****|    |****|****|    |
#     |****|****|    |    |    |****|****|****|****|    |
#    8|****|****|****|    |    |****|****|****|****|    |
#     |****|****|****|    |****|****|****|****|****|****|
#    6|****|****|****|    |****|****|****|****|****|****|
#     |****|****|****|    |****|****|****|****|****|****|
#    4|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#    2|****|****|****|****|****|****|****|****|****|****|
#     |****|****|****|****|****|****|****|****|****|****|
#     |--------------------------------------------------
#     | 0.1| 0.2| 0.3| 0.4| 0.5| 0.6| 0.7| 0.8| 0.9| 1.0|
#==================================================================
# p =  0.287 for sts_runs test from Kuiper Kolmogorov-Smirnov
#     test on 100 pvalues.
