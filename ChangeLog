* 2007-02-05 [r278]  rgb <rgb@localhost>:

	* trunk/dieharder_src/Makefile: This maybe will get to where I can
	  clean this up the rest of the way.

* 2007-01-28 [r277]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.svn.time: This has a brand new
	  ultra-cool target, "installrepo" that makes the rpms and installs
	  them in the repo, from when yum can install them. BTW, I think I
	  forgot the "requires" tag in the dieharder sources, partly
	  because it seems that it isn't, in fact, required. Hmmm.

* 2007-01-28 [r276]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.spec, trunk/dieharder.svn.time,
	  trunk/libdieharder/Makefile: This works!

* 2007-01-27 [r275]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.spec, trunk/dieharder.svn.time,
	  trunk/libdieharder/Makefile: This is getting really close, worth
	  checking in...

* 2007-01-27 [r274]  rgb <rgb@localhost>:

	* trunk/lib/dieharder (removed), trunk/Makefile,
	  trunk/Data/testrands.dat.bin (added), trunk/copyright.h
	  (removed), trunk/testrands.dat (removed), trunk/d_raw.h
	  (removed), trunk/dieharder_web (removed), trunk/testrands.dat.bin
	  (removed), trunk/Data/testrands.dat (added), trunk/Copyright
	  (added), trunk/dieharder.svn.time, trunk/Data/d_raw.h (added):
	  This now builds a perfectly rebuildable tarball. We can think
	  about just what else we'd like to add to that tarball in a
	  moment, but first we need to FINALLY get the rpm to build, maybe.

* 2007-01-27 [r273]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.svn.time, trunk/dieharder.abs:
	  This updates the abstract.

* 2007-01-27 [r272]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.spec, trunk/dieharder.svn.time,
	  trunk/dieharder_src/Makefile, trunk/libdieharder/Makefile: OK,
	  this just maybe is working now with a target that rebuilds both
	  specfiles and Makefiles when the toplevel Makefile is altered.

* 2007-01-27 [r271]  rgb <rgb@localhost>:

	* trunk/dieharder.svn.time, trunk/dieharder_src/Makefile,
	  trunk/libdieharder/Makefile: This is just peachy. make and make
	  install targets work for BOTH dieharder_src and libdieharder
	  directories, which is pretty cool, really. The remaining problem
	  will be how to force a rebuild of the library in such a way that
	  it works when we're developing but doesn't barf when we're
	  rpm-ifying. At this point in time it is high time to try the rpm
	  build.

* 2007-01-27 [r270]  rgb <rgb@localhost>:

	* trunk/dieharder.svn.time, trunk/dieharder_src/Makefile,
	  trunk/libdieharder/Makefile: OK, this is making progress. Time to
	  go back to libdieharder and get a build to work there...

* 2007-01-27 [r269]  rgb <rgb@localhost>:

	* trunk/dieharder.all (removed), trunk/dieharder.svn.time: Just
	  making sure this is all ready to run when I start to edit the
	  Makefile in libdieharder.

* 2007-01-27 [r268]  rgb <rgb@localhost>:

	* trunk/libdieharder/libdieharder.3 (added),
	  trunk/libdieharder/diehard_opso.c (added),
	  trunk/libdieharder/diehard_oqso.c (added),
	  trunk/include/dieharder/sts_monobit.h (added),
	  trunk/include/dieharder/diehard_squeeze.h (added),
	  trunk/libdieharder/rng_file_input.c (added),
	  trunk/include/dieharder/Vtest.h (added),
	  trunk/libdieharder/diehard_runs.c (added),
	  trunk/libdieharder/NOTES (added), trunk/include/dieharder/Xtest.h
	  (added), trunk/include/dieharder/diehard_sums.h (added),
	  trunk/libdieharder/diehard_birthdays.c (added),
	  trunk/libdieharder/rng_dev_urandom.c (added),
	  trunk/include/dieharder/marsaglia_tsang_gcd.h (added),
	  trunk/libdieharder/copyright.h (added),
	  trunk/include/dieharder/diehard_rank_32x32.h (added),
	  trunk/libdieharder/diehard_rank_6x8.c (added),
	  trunk/libdieharder/sts_runs.c (added),
	  trunk/include/dieharder/rgb_lmn.h (added),
	  trunk/include/dieharder/rgb_timing.h (added),
	  trunk/libdieharder/rgb_persist.c (added),
	  trunk/libdieharder/rng_dev_random.c (added),
	  trunk/include/dieharder/diehard_craps.h (added),
	  trunk/include/dieharder/diehard_parking_lot.h (added),
	  trunk/libdieharder/rgb_bitdist.c (added),
	  trunk/libdieharder/diehard_3dsphere.c (added),
	  trunk/libdieharder/rgb_bitdist.cruft (added),
	  trunk/dieharder_src/user_template.h (added),
	  trunk/include/dieharder/diehard_count_1s_byte.h (added),
	  trunk/libdieharder/libdieharder.svn.time (added),
	  trunk/include/dieharder/marsaglia_tsang_gorilla.h (added),
	  trunk/libdieharder/parse.c (added),
	  trunk/include/dieharder/diehard_bitstream.h (added),
	  trunk/libdieharder/README (added), trunk/libdieharder/kstest.c
	  (added), trunk/libdieharder/rng_file_input_raw.c (added),
	  trunk/libdieharder/diehard_dna.c (added),
	  trunk/libdieharder/diehard_operm5.c (added),
	  trunk/include/dieharder/diehard_count_1s_stream.h (added),
	  trunk/libdieharder/std_test.c (added),
	  trunk/include/dieharder/diehard_2dsphere.h (added),
	  trunk/libdieharder/sts_monobit.c (added),
	  trunk/libdieharder/diehard_squeeze.c (added),
	  trunk/libdieharder/bits.c (added),
	  trunk/include/dieharder/diehard_opso.h (added),
	  trunk/libdieharder/bits.cruft (added),
	  trunk/include/dieharder/diehard_oqso.h (added),
	  trunk/libdieharder/Vtest.c (added),
	  trunk/include/dieharder/verbose.h (added),
	  trunk/libdieharder/diehard_sums.c (added),
	  trunk/libdieharder/chisq.c (added), trunk/libdieharder/Xtest.c
	  (added), trunk/include/dieharder/diehard_runs.h (added),
	  trunk/include/dieharder/copyright.h (added),
	  trunk/libdieharder/marsaglia_tsang_gcd.c (added),
	  trunk/include/dieharder/diehard_birthdays.h (added),
	  trunk/libdieharder/diehard_rank_32x32.c (added),
	  trunk/libdieharder/rng_kiss.c (added),
	  trunk/libdieharder/random_seed.c (added),
	  trunk/libdieharder/rgb_lmn.c (added),
	  trunk/include/dieharder/sts_runs.h (added),
	  trunk/include/dieharder/diehard_rank_6x8.h (added),
	  trunk/libdieharder/rgb_timing.c (added),
	  trunk/libdieharder/sample.c (added),
	  trunk/include/dieharder/operm5_rdata.h (added),
	  trunk/include/dieharder/rgb_persist.h (added),
	  trunk/libdieharder/COPYING (added),
	  trunk/libdieharder/diehard_craps.c (added),
	  trunk/libdieharder/diehard_parking_lot.c (added),
	  trunk/dieharder.svn.time, trunk/libdieharder/Makefile (added),
	  trunk/include/dieharder/rgb_bitdist.h (added),
	  trunk/libdieharder/diehard_count_1s_byte.c (added),
	  trunk/include/dieharder/diehard_3dsphere.h (added),
	  trunk/user_template.h (removed), trunk/libdieharder/prob.c
	  (added), trunk/include/dieharder/tests.h (added),
	  trunk/libdieharder/marsaglia_tsang_gorilla.c (added),
	  trunk/libdieharder/diehard_bitstream.c (added),
	  trunk/include/dieharder/parse.h (added), trunk/libdieharder
	  (added), trunk/include/dieharder/libdieharder.h (added),
	  trunk/include/dieharder/diehard_dna.h (added),
	  trunk/include/dieharder/Dtest.h (added),
	  trunk/libdieharder/diehard_count_1s_stream.c (added),
	  trunk/libdieharder/timing.c (added),
	  trunk/include/dieharder/diehard_operm5.h (added),
	  trunk/include/dieharder/std_test.h (added),
	  trunk/libdieharder/rank.c (added),
	  trunk/libdieharder/diehard_2dsphere.c (added): OK, this is a very
	  painful move. We will, of course, mothball and preserve
	  libdieharder's original svn tree, but now that we're figuring out
	  how to do one specfile, many packages from a single toplevel
	  source tree we no longer wish to maintain libdieharder in a
	  separate subversion project. So we're checking it into this one.
	  All the change history is preserved, but in pieces -- CVSROOT
	  first, subversion's libdieharder second, and from now on, here in
	  the one true dieharder tree and its subversion controlled
	  project. Next we have to get this so that a make install does the
	  right thing.

* 2007-01-27 [r267]  rgb <rgb@localhost>:

	* trunk/dieharder.h (removed), trunk/dieharder.svn.time,
	  trunk/dieharder_src/dieharder.h (added),
	  trunk/dieharder_src/Makefile: This is a first cut at making
	  dieharder actually build, after libdieharder is built and
	  installed. From now on BOTH will use ONLY the include files that
	  are stored in ./include, which will actually simplify life
	  tremendously. I may symlink them through to the source
	  directory(s) and may even svn control the symlinks, if svn can
	  manage them. CVS couldn't...

* 2007-01-27 [r266]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time (removed),
	  trunk/dieharder_src/dieharder.1 (added), trunk/standard_run
	  (removed), trunk/Results/standard_run (added), trunk/dieharder.1
	  (removed), trunk/standard_run.S1 (removed),
	  trunk/Results/standard_run.S1 (added), trunk/dieharder.svn.time,
	  trunk/Exclude/still_more_karney.bugs (added): OK, we are within a
	  single step (removing or moving some include files) of being
	  cleaned up and ready to proceed. I'll probably copy at least part
	  of the sm Makefile to get the hang of looping a make through
	  source directories in order to achieve the make install in the
	  right sequence.

* 2007-01-27 [r262-265]  rgb <rgb@localhost>:

	* trunk/makepofk (removed), trunk/bugs (removed),
	  trunk/example_ascii.input (removed), trunk/pofk.gfsr4.tbl
	  (removed), trunk/pofk.ranldx2.avg.tbl (removed),
	  trunk/pofk.mt19937_1999.tbl (removed), trunk/Restricted
	  (removed), trunk/pofk.taus2.tbl (removed), trunk/pofk.stats.tbl
	  (removed), trunk/manual/example_ascii.input (added),
	  trunk/pofk.tbl (removed), trunk/pofk.gfsr4.avg.tbl (removed),
	  trunk/pofk.mt19937_1999.avg.tbl (removed), trunk/scripts/makepofk
	  (added), trunk/standard_run (added), trunk/scripts (added),
	  trunk/pofk.taus2.avg.tbl (removed), trunk/pofk.ranldx2.tbl
	  (removed), trunk/dieharder.svn.time, trunk/db_dieharder.patch
	  (removed): Please?

	* trunk/Results (added), trunk/Results/gfsr4 (added): Still
	  proceeding.

	* trunk/Exclude/diehard.f (added),
	  trunk/Exclude/marsaglia_tsang.pdf (added),
	  trunk/Exclude/karney_bugs (added),
	  trunk/Exclude/db_dieharder.patch (added),
	  trunk/Exclude/more_karney_bugs (added),
	  trunk/Exclude/cern_stats.pdf (added),
	  trunk/Exclude/monty_python.pdf (added), trunk/Exclude (added),
	  trunk/Exclude/gaeblmar.email (added),
	  trunk/Exclude/64_bit_URNG.ps (added): Working through what
	  works...

	* trunk/Data/pofk.ranldx2.avg.tbl (added),
	  trunk/Data/pofk.mt19937_1999.tbl (added),
	  trunk/Data/pofk.ranldx2.tbl (added),
	  trunk/Data/pofk.taus2.avg.tbl (added), trunk/Data/pofk.stats.tbl
	  (added), trunk/Data/pofk.taus2.tbl (added),
	  trunk/Data/pofk.gfsr4.avg.tbl (added), trunk/Data/pofk.tbl
	  (added), trunk/Data (added), trunk/Data/pofk.mt19937_1999.avg.tbl
	  (added), trunk/Data/pofk.gfsr4.tbl (added): Let's work through
	  what we can.

* 2007-01-27 [r261]  rgb <rgb@localhost>:

	* trunk/pofk.gfsr4.tbl (added), trunk/pofk.mt19937_1999.tbl
	  (added), trunk/pofk.ranldx2.tbl (added), trunk/pofk.stats.tbl
	  (added), trunk/pofk.taus2.tbl (added): Adding these -- we should
	  save this stuff even though we don't really need it anymore, I
	  don't think. Part of documenting our work.

* 2007-01-27 [r256-260]  rgb <rgb@localhost>:

	* trunk/bugs (added): Adding this. Wish I could do more of these
	  adds at once.

	* trunk/db_dieharder.patch (added): Adding this, so I can move it.

	* trunk/Restricted/more_karney_bugs (added),
	  trunk/Restricted/cern_stats.pdf (added),
	  trunk/Restricted/64_bit_URNG.ps (added),
	  trunk/Restricted/diehard.f (added),
	  trunk/Restricted/marsaglia_tsang.pdf (added): This is all stuff
	  to be excluded. Some of this doesn't really need to be version
	  controlled, but if I plan to use the svn tree as the only
	  PERMANENT storage receptacle for the project, well, it does.

	* trunk/Restricted/gaeblmar.email (added): Adding this too.

	* trunk/dieharder_src/COPYING (added), trunk/dieharder_src/NOTES
	  (added), trunk/Restricted/monty_python.pdf (added),
	  trunk/dieharder_src/db_gnu_r_rngs.c (added),
	  trunk/db_gnu_r_rngs.c (removed), trunk/dieharder.svn.time,
	  trunk/dieharder_src/Makefile (added), trunk/dieharder_src/README
	  (added), trunk/dieharder_src/copyright.h (added): Checking in
	  what SHOULD be enough to get a successful toplevel build at some
	  future time, we hope. Still have to reorganize the toplevel dir
	  and Makefile as the make rpm target will from now on ONLY live in
	  the toplevel dieharder projects. Obviously we're going to have to
	  go through all of this all over again for the wulfware project --
	  libwulf, wulfstat, gwulfstat, wulfweb, wulflogger, etc will all
	  be magically and properly packaged so that they "just run".

* 2007-01-27 [r255]  rgb <rgb@localhost>:

	* trunk/dieharder_src/list_rand.c (added),
	  trunk/dieharder_src/work.c (added),
	  trunk/dieharder_src/run_sts_monobit.c (added), trunk/work.c
	  (removed), trunk/dieharder_src/run_diehard_squeeze.c (added),
	  trunk/dieharder_src/dieharder.c (added), trunk/output_rnds.c
	  (removed), trunk/dieharder_src/help.c (added), trunk/help.c
	  (removed), trunk/dieharder_src/run_diehard_sums.c (added),
	  trunk/dieharder_src/run_user_template.c (added),
	  trunk/dieharder_src/histogram.c (added),
	  trunk/dieharder_src/run_marsaglia_tsang_gcd.c (added),
	  trunk/run_diehard_sums.c (removed), trunk/run_diehard_birthdays.c
	  (removed), trunk/dieharder_src/run_diehard_rank_32x32.c (added),
	  trunk/run_diehard_rank_32x32.c (removed), trunk/startup.c
	  (removed), trunk/dieharder_src/run_rgb_timing.c (added),
	  trunk/run_rgb_timing.c (removed),
	  trunk/dieharder_src/user_template.c (added),
	  trunk/run_rgb_persist.c (removed), trunk/db_gnu_r_rngs.c (added),
	  trunk/dieharder_src/run_diehard_craps.c (added),
	  trunk/dieharder_src/run_diehard_parking_lot.c (added),
	  trunk/dieharder_src/run_diehard_count_1s_byte.c (added),
	  trunk/run_rgb_bitdist.c (removed), trunk/dieharder_src/parsecl.c
	  (added), trunk/dieharder_src/run_diehard_bitstream.c (added),
	  trunk/dieharder_src/list_rngs.c (added), trunk/run_diehard_dna.c
	  (removed), trunk/dieharder_src/run_diehard_count_1s_stream.c
	  (added), trunk/dieharder_src/test.c (added),
	  trunk/dieharder_src/run_diehard_2dsphere.c (added),
	  trunk/list_rand.c (removed), trunk/dieharder_src/add_my_types.c
	  (added), trunk/test.c (removed), trunk/run_diehard_2dsphere.c
	  (removed), trunk/add_my_types.c (removed),
	  trunk/dieharder_src/run_diehard_opso.c (added),
	  trunk/dieharder_src/run_diehard_oqso.c (added),
	  trunk/run_diehard_opso.c (removed),
	  trunk/dieharder_src/output_rnds.c (added),
	  trunk/run_sts_monobit.c (removed), trunk/run_diehard_squeeze.c
	  (removed), trunk/run_diehard_oqso.c (removed), trunk/dieharder.c
	  (removed), trunk/dieharder_src/run_diehard_runs.c (added),
	  trunk/run_diehard_runs.c (removed),
	  trunk/dieharder_src/run_diehard_birthdays.c (added),
	  trunk/dieharder_src/empty_random.c (added), trunk/histogram.c
	  (removed), trunk/run_marsaglia_tsang_gcd.c (removed),
	  trunk/run_user_template.c (removed), trunk/empty_random.c
	  (removed), trunk/dieharder_src/startup.c (added),
	  trunk/dieharder_src/run_sts_runs.c (added),
	  trunk/dieharder_src/run_diehard_rank_6x8.c (added),
	  trunk/run_diehard_rank_6x8.c (removed), trunk/run_sts_runs.c
	  (removed), trunk/dieharder_src/run_rgb_persist.c (added),
	  trunk/dieharder.svn.time, trunk/user_template.c (removed),
	  trunk/run_diehard_craps.c (removed),
	  trunk/run_diehard_parking_lot.c (removed),
	  trunk/dieharder_src/run_rgb_bitdist.c (added),
	  trunk/dieharder_src/run_diehard_3dsphere.c (added),
	  trunk/run_diehard_3dsphere.c (removed),
	  trunk/run_diehard_count_1s_byte.c (removed), trunk/parsecl.c
	  (removed), trunk/run_diehard_bitstream.c (removed),
	  trunk/dieharder_src/testbits.c (added), trunk/testbits.c
	  (removed), trunk/list_rngs.c (removed),
	  trunk/dieharder_src/run_diehard_dna.c (added),
	  trunk/dieharder_src/run_diehard_operm5.c (added),
	  trunk/run_diehard_count_1s_stream.c (removed),
	  trunk/run_diehard_operm5.c (removed): Moving sources to their new
	  location in a toplevel packaged version of the dieharder project.

* 2007-01-27 [r254]  rgb <rgb@localhost>:

	* trunk/dieharder_src (added), trunk/dieharder.svn.time: OK, this
	  is where we're going to put the actual dieharder (tty interface)
	  sources.

* 2007-01-27 [r252-253]  rgb <rgb@localhost>:

	* trunk/dieharder.svn.time (added): Jeeze, I left this one out, so
	  the record of changes is alas distributed per file, which sucks.

	* trunk/dieharder.spec: We are going to make this a
	  one-source-package, two (or three) output binary/noarch package
	  project, the most complex rpm we've built to date. This will
	  require that we completely reconsider how everything, and I mean
	  everything, is packaged. Basically we're going to need to create
	  a SINGLE source tarball, which therefore needs to be very neatly
	  organized. It needs to use PREFIX in its makefile to determine
	  its library and include paths (as this can be reset in the spec
	  file build). It needs to cycle through a set of source
	  directories in order and do e.g. a make install in each with the
	  appropriate prefix to ensure that all required files are
	  installed from the library sources before they are needed by the
	  UI(s). Basically, this is going to be a PITA and will likely
	  break the shit out of things before I get it right. Sigh.

* 2007-01-27 [r251]  rgb <rgb@localhost>:

	* trunk/manual (added), trunk/Makefile, trunk/dieharder.spec,
	  trunk/doc/Makefile (removed), trunk/manual/dieharder.tex (added),
	  trunk/manual/Makefile (added), trunk/doc/dieharder.tex (removed):
	  Oops -- I need to make sure that I save this now, in a state
	  where the rpm WILL build if I install libdieharder first and use
	  the appropriate -I tag. I'm in midstream trying to learn the
	  %package directive for specfiles, though, which SHOULD permit me
	  to do integrated one-stop development of both the toplevel
	  dieharder UI and libdieharder for the moment, and in the not
	  infinitely distant future a GUI (gdieharder?), the tty UI, the
	  library libdieharder, a manual pdf for the whole thing, whatever.

* 2007-01-19 [r250]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.spec: I don't know exactly what
	  changes I'm checking in, but let's give it a shot.

* 2006-10-24 [r248-249]  rgb <rgb@localhost>:

	* trunk/standard_run.S1 (added): Sending a standard run result set
	  into SVN...

	* trunk/testbits.c, trunk/startup.c: Just forcing this through, out
	  of sheer necessity.

* 2006-10-10 [r247]  rgb <rgb@localhost>:

	* trunk/NOTES: Checking in an update to NOTES only. Plans plans
	  plans.

* 2006-10-09 [r246]  rgb <rgb@localhost>:

	* trunk/startup.c, trunk/run_rgb_persist.c: This removes the bit
	  test routine from startup (easily replaced) and fixes the output
	  of rgb_persist for the new CR-free dumpbits.

* 2006-10-09 [r245]  rgb <rgb@localhost>:

	* trunk/testbits.c, trunk/startup.c: This is a final version with
	  testbits in place and ACTIVE -- we will now deprecate its old
	  routines and try to use only its new ones for bitlevel tests e.g.
	  birthdays and the various "overlapping buffer" tests. We can now
	  test all rngs as source of BITS in a stream and not UINTS in a
	  stream that just happen to have a bunch of zero bits in the high
	  order slots.

* 2006-10-07 [r244]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/test.c, trunk/testbits.c (added),
	  trunk/startup.c: This SEEMS to be a working version of a very
	  complex and somewhat nasty routine that can grab arbitrary
	  windows from a buffer of rands and return them, with cyclic
	  wraparound. This will be useful for many tests. I'm going to
	  guess that my next chore is to create a routine that precisely
	  fills a uint from any of the generators, without wasting or
	  skipping any bits.

* 2006-10-04 [r243]  rgb <rgb@localhost>:

	* trunk/test.c: Fixed the output so grepping on Assessment will
	  yield all results from a -a run.

* 2006-10-04 [r242]  rgb <rgb@localhost>:

	* trunk/makepofk (added), trunk/pofk.gfsr4.avg.tbl (added),
	  trunk/pofk.tbl (added), trunk/pofk.mt19937_1999.avg.tbl (added),
	  trunk/startup.c, trunk/pofk.ranldx2.avg.tbl (added),
	  trunk/pofk.taus2.avg.tbl (added): This is all simply lovely and
	  very important stuff to fire on in.

* 2006-10-03 [r241]  rgb <rgb@localhost>:

	* trunk/Makefile: Sending this at LEAST to the server upstairs...

* 2006-10-03 [r240]  rgb <rgb@localhost>:

	* trunk/run_rgb_bitdist.c: This now runs completely through,
	  randomly sampling pvalues for the various target values. Alas, it
	  will require significant rewriting (and a really long runtime) to
	  sample EACH value 100x -- say 256 x 2.5 minutes. Say 12 hours to
	  do 8 bits.

* 2006-10-03 [r239]  rgb <rgb@localhost>:

	* trunk/run_rgb_bitdist.c: This is a working checkin for
	  rgb_bitdist, at last, again. Now to enable -a to run 1 through 10
	  bit tests...(the latter taking roughly 10 minutes to complete).

* 2006-09-28 [r238]  rgb <rgb@localhost>:

	* trunk/run_rgb_bitdist.c, trunk/help.c, trunk/run_diehard_runs.c:
	  This is well underway. I've "fixed" diehard_birthdays, maybe but
	  still have a ways to go on rgb_bitdist.

* 2006-09-21 [r237]  rgb <rgb@localhost>:

	* trunk/doc/charles_karney.txt (added), trunk/startup.c,
	  trunk/dieharder_web (added), trunk/doc/cdf6850_badrand.pdf
	  (added): Well, dunno, but this seems to fix an important build
	  bug AND still works. Clearly I have a lot that I could do with
	  dieharder today or this week; equally clearly I have too many
	  other things to do as well -- I could work all night without
	  blinking, for the next six months, and just about break even on
	  task completion...

* 2006-08-23 [r236]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/run_diehard_birthdays.c, trunk/work.c,
	  trunk/run_sts_monobit.c, trunk/run_sts_runs.c,
	  trunk/run_rgb_persist.c, trunk/help.c: This should be "it" -- all
	  done. Quite some testing to do first, but overall we've even
	  killed off global rand_int. We're close to the point where we can
	  a) do a major decrufting to clean up the library, implement the
	  MYDEBUG macro, etc. b) put it out to the world for testing; c)
	  add the winxx #ifdefs; d) start real work on it again with some
	  more sts tests!

* 2006-08-22 [r235]  rgb <rgb@localhost>:

	* trunk/run_rgb_timing.c: This is definitely time to quit for the
	  day, regardless of what is working or what isn't.

* 2006-08-22 [r234]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/run_marsaglia_tsang_gcd.c (added),
	  trunk/run_user_template.c, trunk/work.c, trunk/run_rgb_timing.c,
	  trunk/help.c: This is working, AFAICT, through Marsaglia and
	  Tsang GCD. I do need to test sums again, but everything else
	  seems good (rgb_bitdist, recall isn't finished yet nor are the
	  sts tests).

* 2006-08-22 [r233]  rgb <rgb@localhost>:

	* trunk/run_diehard_craps.c, trunk/run_diehard_parking_lot.c,
	  trunk/test.c, trunk/run_diehard_2dsphere.c,
	  trunk/run_diehard_3dsphere.c, trunk/run_diehard_count_1s_byte.c,
	  trunk/run_diehard_opso.c, trunk/run_diehard_squeeze.c,
	  trunk/run_diehard_oqso.c, trunk/run_diehard_runs.c,
	  trunk/run_diehard_sums.c, trunk/dieharder.h,
	  trunk/run_diehard_birthdays.c, trunk/run_diehard_bitstream.c,
	  trunk/run_diehard_rank_32x32.c, trunk/run_diehard_rank_6x8.c,
	  trunk/run_diehard_dna.c, trunk/run_diehard_count_1s_stream.c,
	  trunk/run_diehard_operm5.c: This is diehard working through
	  dieharder's UI, entirely from libdieharder calls. That leaves us
	  with a few minor changes to get to where things all work again,
	  plus some decrufting...

* 2006-08-22 [r232]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/run_diehard_craps.c,
	  trunk/run_diehard_parking_lot.c, trunk/run_diehard_bitstream.c,
	  trunk/run_diehard_2dsphere.c, trunk/run_rgb_bitdist.c,
	  trunk/run_diehard_3dsphere.c, trunk/run_diehard_count_1s_byte.c,
	  trunk/work.c, trunk/run_diehard_opso.c,
	  trunk/run_diehard_squeeze.c, trunk/help.c,
	  trunk/run_diehard_count_1s_stream.c, trunk/run_diehard_runs.c,
	  trunk/run_diehard_sums.c: This works through sums -- runs and
	  craps don't quite work yet...

* 2006-08-22 [r231]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/run_diehard_rank_32x32.c (added),
	  trunk/run_diehard_rank_32x32c (removed), trunk/work.c,
	  trunk/run_diehard_rank_6x8.c, trunk/help.c: This works through
	  diehard_rank_6x8(), I believe. Only 3/4 or so of the tests to go.
	  Sigh. Or maybe even 5/6. Or more. Double sigh.

* 2006-08-21 [r230]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/run_diehard_rank_32x32c, trunk/work.c,
	  trunk/help.c, trunk/run_diehard_operm5.c: Oops, missed a name.
	  BTW, note well that operm5 appears to work now.

* 2006-08-19 [r229]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/run_diehard_birthdays.c,
	  trunk/work.c, trunk/help.c: Well, diehard_birthdays is totally
	  screwed, but we'll gradually unscrew it. It is, kinda, in
	  standard format at this point, but something isn't working right
	  at all.

* 2006-08-19 [r228]  rgb <rgb@localhost>:

	* trunk/run_diehard_craps.c (added),
	  trunk/run_diehard_parking_lot.c (added),
	  trunk/run_diehard_2dsphere.c (added),
	  trunk/run_diehard_3dsphere.c (added),
	  trunk/run_diehard_rank_32x32c (added),
	  trunk/run_diehard_count_1s_byte.c (added), trunk/work.c,
	  trunk/run_diehard_opso.c (added), trunk/run_sts_monobit.c
	  (added), trunk/run_diehard_squeeze.c (added),
	  trunk/run_diehard_oqso.c (added), trunk/help.c,
	  trunk/run_diehard_sums.c (added), trunk/run_diehard_runs.c
	  (added), trunk/Makefile, trunk/run_diehard_birthdays.c (added),
	  trunk/run_diehard_bitstream.c (added),
	  trunk/run_diehard_rank_6x8.c (added), trunk/run_sts_runs.c
	  (added), trunk/run_diehard_count_1s_stream.c (added),
	  trunk/run_diehard_operm5.c (added): This adds blanks for all of
	  the tests that haven't been converted into standard libdieharder
	  form yet. I should be able to convert a bunch at a time, almost.

* 2006-08-19 [r227]  rgb <rgb@localhost>:

	* trunk/run_dieharder_dna.c (removed), trunk/run_diehard_dna.c
	  (added): This now runs, I think, using the new encapsulation of
	  diehard_dna.

* 2006-08-19 [r226]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/run_dieharder_dna.c (added),
	  trunk/run_user_template.c, trunk/work.c, trunk/help.c: Check in
	  this stuff so I can move run_dieharder_dna.c

* 2006-08-18 [r224-225]  rgb <rgb@localhost>:

	* trunk/run_user_template.c, trunk/user_template.c: Fixed a tiny
	  bug (made a change in user_template.h that had to be implemented
	  in code).

	* trunk/Makefile, trunk/dieharder.h, trunk/run_user_template.c
	  (added), trunk/user_template.h, trunk/test.c,
	  trunk/run_rgb_bitdist.c, trunk/work.c, trunk/user_template.c:
	  This is a WORKING version of the user_template test, functioning
	  on top of a new "standard" testing shell that is part of the
	  library. Now all I have to do is port all STANDARD tests to this
	  format. Sigh.

* 2006-08-17 [r223]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/test.c,
	  trunk/run_rgb_bitdist.c (added), trunk/work.c,
	  trunk/run_rgb_persist.c (added), trunk/help.c,
	  trunk/user_template.c: Sending it in (working on bitdist).

* 2006-08-17 [r222]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/work.c,
	  trunk/run_rgb_timing.c (added), trunk/help.c: This works for
	  exactly one test. Lots of work tomorrow.

* 2006-08-16 [r221]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/copyright.h,
	  trunk/dieharder.spec, trunk/NOTES: All right, the rpm building of
	  dieharder will not work until we are ready to actually install
	  the libdieharder rpm. This is to be expected, really. I'm just
	  going to have to build straight binary dieharder versions while
	  working on the library and develop and alternative make target
	  set (sigh) to build the rpm iff the libdieharder rpm is installed
	  and up to date.

* 2006-08-16 [r220]  rgb <rgb@localhost>:

	* trunk/measure_rate.c (removed), trunk/Makefile, trunk/kstest.c
	  (removed), trunk/parse.h (removed), trunk/example_ascii.input
	  (added), trunk/random_seed.c (removed), trunk/default.sm
	  (removed), trunk/sample.c (removed), trunk/prob.c (removed),
	  trunk/showrand.sm (removed), trunk/timing.c (removed),
	  trunk/kiss.c (removed), trunk/Vtest.h (removed), trunk/rank.c
	  (removed): This SEEMS to still build, and is starting to look
	  pretty well stripped.

* 2006-08-16 [r219]  rgb <rgb@localhost>:

	* trunk/diehard_bitstream.h (removed),
	  trunk/diehard_count_1s_stream.c (removed), trunk/diehard_operm5.c
	  (removed), trunk/block.c (removed),
	  trunk/diehard_count_1s_stream.h (removed), trunk/diehard_operm5.h
	  (removed), trunk/file_input.c (removed), trunk/block.h (removed),
	  trunk/bits.c (removed), trunk/dev_urandom.c (removed),
	  trunk/diehard_sums.c (removed), trunk/diehard_birthdays.c
	  (removed), trunk/tensor.c (removed), trunk/lib/dieharder (added),
	  trunk/diehard_sums.h (removed), trunk/diehard_rank_32x32.c
	  (removed), trunk/dev_random.c (removed),
	  trunk/diehard_birthdays.h (removed), trunk/tensor.h (removed),
	  trunk/diehard_rank_32x32.h (removed), trunk/rgb_timing.c
	  (removed), trunk/rgb_persist.c (removed), trunk/lib (added),
	  trunk/rgb_timing.h (removed), trunk/rgb_persist.h (removed),
	  trunk/include/dieharder (added), trunk/rgb_bitdist.c (removed),
	  trunk/Makefile, trunk/rgb_bitdist.h (removed),
	  trunk/file_input_raw.c (removed), trunk/parse.c (removed),
	  trunk/diehard_dna.c (removed), trunk/diehard_dna.h (removed),
	  trunk/diehard_2dsphere.c (removed), trunk/dieharder.h,
	  trunk/Ntest.c (removed), trunk/diehard_opso.c (removed),
	  trunk/sts_monobit.c (removed), trunk/diehard_squeeze.c (removed),
	  trunk/diehard_2dsphere.h (removed), trunk/diehard_oqso.c
	  (removed), trunk/Vtest.c (removed), trunk/diehard_opso.h
	  (removed), trunk/sts_monobit.h (removed), trunk/diehard_squeeze.h
	  (removed), trunk/diehard_oqso.h (removed), trunk/diehard_runs.c
	  (removed), trunk/chisq.c (removed), trunk/Xtest.c (removed),
	  trunk/marsaglia_tsang_gcd.c (removed), trunk/Vtest.h (added),
	  trunk/diehard_runs.h (removed), trunk/Xtest.h (removed),
	  trunk/marsaglia_tsang_gcd.h (removed), trunk/rgb_lmn.c (removed),
	  trunk/diehard_rank_6x8.c (removed), trunk/sts_runs.c (removed),
	  trunk/rgb_lmn.h (removed), trunk/diehard_rank_6x8.h (removed),
	  trunk/sts_runs.h (removed), trunk/operm5_rdata.h (removed),
	  trunk/diehard_craps.c (removed), trunk/diehard_parking_lot.c
	  (removed), trunk/diehard_3dsphere.c (removed),
	  trunk/diehard_craps.h (removed), trunk/diehard_parking_lot.h
	  (removed), trunk/diehard_count_1s_byte.c (removed), trunk/include
	  (added), trunk/diehard_3dsphere.h (removed),
	  trunk/diehard_count_1s_byte.h (removed), trunk/matrix.c
	  (removed), trunk/marsaglia_tsang_gorilla.c (removed),
	  trunk/matrix.h (removed), trunk/marsaglia_tsang_gorilla.h
	  (removed), trunk/diehard_bitstream.c (removed): This is ALMOST
	  partitioned into library and UI. I'm decrufting the separation,
	  but have a long way to go. The main thing now is to ensure that
	  the program WORKS at every step of the way.

* 2006-08-10 [r218]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/rgb_lmn.c (added),
	  trunk/startup.c, trunk/work.c, trunk/rgb_lmn.h (added),
	  trunk/help.c: This is an update with two purposes. 1) Fix Usage()
	  as file input now "works". 2) introduce a template "lmn" test
	  that will be developed as a super version of rgb_bitdist as soon
	  as I figure out the CORRECT statistic.

* 2006-07-27 [r217]  rgb <rgb@localhost>:

	* trunk/Xtest.h (added), trunk/dieharder.h, trunk/dieharder.spec:
	  This is a decrufting checkin. I've moved almost all of the
	  possibly encumbered files from diehard (all the sources, for
	  sure) into the Restricted directory, cleaned up doc a bit,
	  removed all *.cruft files, removed some data and temp run files,
	  all to try to strip down the size of the tarball. At this point
	  the irreducible "problem" is probably SP800-22b.pdf, which is a
	  whopping 1.2 MB. I could probably just link to it somehow in
	  dieharder.pdf and stop including it... but not yet. It is too
	  useful to me in development. Ditto tests.txt -- Marsaglia's raw
	  test descriptions. I'm considering its inclusion to be fair use
	  of published material, but if he really objects I'll rewrite the
	  text descriptions in prose text of my own and screw the whole
	  thing, both here and in the code. I am not going to abandon
	  dieharder per se, period.

* 2006-07-27 [r216]  rgb <rgb@localhost>:

	* trunk/Makefile: This is a minor version bump to get the damn
	  binary file out of the source tarball.

* 2006-07-25 [r215]  rgb <rgb@localhost>:

	* trunk/diehard.f90 (removed), trunk/README,
	  trunk/marsaglia_tsang_gcd.h, trunk/Btest.c (removed),
	  trunk/doc/diehard_tests.txt (removed), trunk/dieharder_wp.pdf
	  (removed), trunk/Restricted/diehard.f90 (added),
	  trunk/diehard_operm5.c, trunk/COPYING,
	  trunk/Restricted/diehard_tests.txt (added), trunk/Restricted
	  (added), trunk/Makefile, trunk/dieharder.h, trunk/confidence.c
	  (removed), trunk/dieharder.spec, trunk/doc/Makefile (added),
	  trunk/Vtest.c (added), trunk/doc/dieharder.tex (added): OK, this
	  contains a lot of rearrangements. I've moved possible
	  copyright-violating stuff into Restricted so I don't redistribute
	  it. I've added a "dieharder manual" under construction, using the
	  journal article that isn't as a base. I've started to rearrange
	  Btest into Vtest to make it make sense, somewhat. I've ignored
	  the gorilla test for now.

* 2006-07-21 [r213-214]  rgb <rgb@localhost>:

	* trunk/marsaglia_tsang_gorilla.c (added), trunk/kiss.c (added),
	  trunk/marsaglia_tsang_gorilla.h (added): Checking in this stuff
	  before I lose it. kiss in particular needs to go in pretty soon.

	* trunk/Makefile, trunk/dieharder.h, trunk/marsaglia_tsang_gcd.h,
	  trunk/dieharder.spec, trunk/startup.c, trunk/work.c,
	  trunk/help.c, trunk/marsaglia_tsang_gcd.c, trunk/dieharder.abs:
	  This is a final checkin of GCD -- the next time I mess with it
	  will be to include one or more of the CUMULATED kprob vectors for
	  analysis and averaging. I'm sending this to the website as a
	  minor number bump, indicating another test. Note that I've also
	  started on the kiss RNG (to be able to better compare to
	  Marsaglia) and will likely also work on adding several others of
	  his favorites.

* 2006-07-21 [r212]  rgb <rgb@localhost>:

	* trunk/marsaglia_tsang_gcd.h, trunk/Btest.c,
	  trunk/marsaglia_tsang_gcd.c: This may be really close to being
	  "done" and ready for a major version bump. The only thing I lack
	  is the very large statistic samples of kprob from the s nodes.

* 2006-07-21 [r211]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/user_template.h (added),
	  trunk/marsaglia_tsang_gcd.h, trunk/template.h (removed),
	  trunk/Btest.c, trunk/startup.c, trunk/work.c,
	  trunk/user_template.c (added), trunk/marsaglia_tsang_gcd.c,
	  trunk/parsecl.c, trunk/template.c (removed): This is a
	  semi-functioning MT GCD test. At the moment, although the k
	  sampling works perfectly, we FAIL because the binomial
	  distribution MT suggest is way far away from the experiments for
	  large tsamples. I'm therefore going to roll my own target
	  distribution, using mt19937_1999 AND rndlx2 to make the tables (I
	  believe that they'll agree to something like four or five places,
	  maybe more).

* 2006-07-21 [r210]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/marsaglia_tsang_gcd.h
	  (added), trunk/work.c, trunk/help.c, trunk/marsaglia_tsang_gcd.c
	  (added), trunk/diehard_bitstream.c, trunk/template.c: Check these
	  in so we can move things around...

* 2006-07-20 [r209]  rgb <rgb@localhost>:

	* trunk/doc/marsaglia_tsang.pdf (added): Adding a NEW paper by
	  Marsaglia and Tsang. Marsaglia is apparently somehow hooked into
	  the Hong Kong effort.

* 2006-07-20 [r208]  rgb <rgb@localhost>:

	* trunk/doc/fips1402annexc.pdf (added), trunk/doc/RNGVS.pdf
	  (added): Adding two more NIST publications...

* 2006-07-20 [r207]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.spec, trunk/output_rnds.c,
	  trunk/parsecl.c: FWIW, I have now verified that I get PRECISELY
	  the same results for the operm5 test (which I find "worrisome" in
	  that nothing passes it, which I deem to be most unlikely) as
	  die.c. I suppose I should give the diehard.f90 version a shot, if
	  I can get it to compile.

* 2006-07-19 [r204-206]  rgb <rgb@localhost>:

	* trunk/Makefile: Finally, this is revision 1.2.26, including the
	  template test (which works, after all...). I wonder if bub bub
	  shum is going into GSL?

	* trunk/dieharder.spec, trunk/dieharder_wp.pdf (added): OK,
	  checking these in...

	* trunk/diehard_runs.h, trunk/diehard_rank_32x32.c,
	  trunk/diehard_rank_6x8.c, trunk/sts_runs.c, trunk/Btest.c,
	  trunk/diehard_dna.c, trunk/diehard_count_1s_stream.c,
	  trunk/diehard_operm5.c, trunk/diehard_craps.c, trunk/help.c,
	  trunk/diehard_parking_lot.c, trunk/diehard_operm5.h,
	  trunk/diehard_2dsphere.c, trunk/dieharder.h, trunk/rgb_bitdist.c,
	  trunk/diehard_3dsphere.c, trunk/Ntest.c,
	  trunk/diehard_count_1s_byte.c, trunk/dieharder.spec,
	  trunk/sts_monobit.c, trunk/diehard_opso.c,
	  trunk/diehard_squeeze.c, trunk/diehard_oqso.c,
	  trunk/diehard_2dsphere.h, trunk/diehard_3dsphere.h,
	  trunk/diehard_sums.c, trunk/diehard_runs.c, trunk/Xtest.c,
	  trunk/diehard_birthdays.c, trunk/diehard_bitstream.c,
	  trunk/template.c: OK, I guess I've made many changes, although at
	  this point God knows what they are. This program is really about
	  ready to roll, though -- I think I'll bump another bugfix number
	  and push it out. With the documentation PDF, come to think of
	  it...

* 2006-07-17 [r203]  rgb <rgb@localhost>:

	* trunk/dieharder.all: Just in case there is ANY doubt, the whole
	  suite FINALLY passed this simple test. Next we'll do a run with
	  file based input to see if that works too.

* 2006-07-17 [r202]  rgb <rgb@localhost>:

	* trunk/dieharder.all, trunk/rgb_timing.c, trunk/rgb_persist.c,
	  trunk/rgb_timing.h: Grrr. Yes, even rgb_timing.h has to be done
	  correctly...

* 2006-07-17 [r201]  rgb <rgb@localhost>:

	* trunk/dieharder.all, trunk/sts_runs.c, trunk/work.c,
	  trunk/diehard_dna.c, trunk/rgb_persist.c, trunk/diehard_osums.c
	  (removed), trunk/diehard_craps.c, trunk/rgb_persist.h,
	  trunk/diehard_parking_lot.c, trunk/rgb_bitdist.c,
	  trunk/dieharder.h, trunk/diehard_opso.c,
	  trunk/diehard_2dsphere.h, trunk/diehard_oqso.c,
	  trunk/rgb_bitdist.h, trunk/diehard_3dsphere.h,
	  trunk/diehard_count_1s_byte.h, trunk/diehard_sums.c,
	  trunk/diehard_bitstream.c, trunk/dieharder.abs: This may,
	  finally, at last, possibly, could conceivably be the last fix
	  required to get diehard -a to WORK again all the way through, at
	  least for the default rng. I'll need to test it independently for
	  file based test(s) with the -a flag, as there may be rewind
	  issues to deal with there (as in the need to do a rewind at the
	  beginning of each test call so that a rewind isn't necessary
	  inside the test if there are enough rands in the file).

* 2006-07-14 [r200]  rgb <rgb@localhost>:

	* trunk/diehard_bitstream.h (added), trunk/diehard_dna.c,
	  trunk/diehard_count_1s_stream.c, trunk/diehard_dna.h (added),
	  trunk/diehard_operm5.c, trunk/diehard_count_1s_stream.h (added),
	  trunk/dieharder.h, trunk/diehard_2dsphere.c, trunk/sts_monobit.c,
	  trunk/diehard_opso.c, trunk/diehard_oqso.c,
	  trunk/diehard_squeeze.c, trunk/diehard_2dsphere.h (added),
	  trunk/diehard_opso.h (added), trunk/sts_monobit.h (added),
	  trunk/diehard_oqso.h (added), trunk/diehard_squeeze.h (added),
	  trunk/diehard_runs.c, trunk/diehard_sums.c,
	  trunk/diehard_birthdays.c, trunk/template.c,
	  trunk/diehard_rank_32x32.c, trunk/diehard_sums.h (added),
	  trunk/dieharder.all, trunk/sts_runs.c, trunk/diehard_rank_6x8.c,
	  trunk/diehard_rank_6x8.h (added), trunk/sts_runs.h (added),
	  trunk/rgb_timing.h (added), trunk/diehard_craps.c,
	  trunk/diehard_parking_lot.c, trunk/rgb_bitdist.c,
	  trunk/diehard_3dsphere.c, trunk/diehard_parking_lot.h (added),
	  trunk/diehard_count_1s_byte.c, trunk/rgb_bitdist.h (added),
	  trunk/diehard_3dsphere.h (added), trunk/diehard_count_1s_byte.h
	  (added), trunk/diehard_bitstream.c: This FINALLY should be DONE
	  -- completely reworked to avoid at least one cause of memory
	  management madness, and entirely consistent in test structure top
	  to bottom. It is really time to redo the -a trial and see what if
	  anything fails...

* 2006-07-14 [r199]  rgb <rgb@localhost>:

	* trunk/diehard_runs.h (added), trunk/diehard_operm5.h,
	  trunk/diehard_rank_32x32.c, trunk/dieharder.h,
	  trunk/dieharder.all, trunk/diehard_birthdays.h (added),
	  trunk/d_raw.h (added), trunk/diehard_rank_32x32.h (added),
	  trunk/rgb_persist.c, trunk/operm5_rdata.h (added),
	  trunk/diehard_operm5.c, trunk/rgb_persist.h (added),
	  trunk/help.c, trunk/template.c: OK ALL of these are updated, but
	  something is still making dieharder die before it makes it
	  through a dieharder -a. We can only soldier on...

* 2006-07-14 [r198]  rgb <rgb@localhost>:

	* trunk/dieharder.all, trunk/startup.c, trunk/diehard_birthdays.c,
	  trunk/template.c: This fixes diehard birthdays. Gotta stop
	  changing e.g. template as I go...

* 2006-07-14 [r197]  rgb <rgb@localhost>:

	* trunk/histogram.c, trunk/template.h, trunk/template.c: This
	  should complete template.c and fix histogram for larger p-values.

* 2006-07-14 [r196]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dc2.h (removed),
	  trunk/histogram.c, trunk/template.h (added), trunk/work.c,
	  trunk/diehard_runs.c, trunk/dc2.c (removed), trunk/template.c
	  (added): This adds a template program (that is actually a test of
	  sorts) to use to help users add tests and to use to replace parts
	  of existing tests.

* 2006-07-14 [r195]  rgb <rgb@localhost>:

	* trunk/diehard_craps.h, trunk/diehard_runs.c,
	  trunk/diehard_craps.c: We continue to clean up craps as a decent
	  example of a good implementation of the new tweaks on test
	  encapsulation. Test-specific data is looking good. We are CLOSE
	  to where we can block-copy in a template for the test shell,
	  change the names, and be ready to tweak just a bit from the old
	  sources for 2/3 of the remaining tests.

* 2006-07-13 [r194]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dc2.h, trunk/diehard_craps.h, trunk/dc2.c,
	  trunk/diehard_craps.c: OK, this is now FIXED and we've got a
	  prototype (of sorts) for the new test encapsulation, working.

* 2006-07-13 [r193]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dc2.h (added), trunk/diehard_craps.h
	  (added), trunk/dc2.c (added), trunk/diehard_craps.c: I don't know
	  exactly what is wrong, but I do know I'd better figure it out.

* 2006-07-13 [r192]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/test.c (added),
	  trunk/sample.c, trunk/startup.c, trunk/work.c,
	  trunk/diehard_craps.c, trunk/help.c: There are two major things
	  here -- one is a real live bugfix in diehard_craps where one
	  little 22 was supposed to be a little old 21. Also, I've
	  experimented with improving the test encapsulation and think that
	  I've succeeded. The attempt is in dc2 (a user level program I
	  used to debug the craps problem) but I will now backport what I
	  figured out there to the mainstream tests as rapidly as possible.

* 2006-07-13 [r191]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/rgb_bitdist.c, trunk/sts_monobit.c,
	  trunk/sts_runs.c, trunk/diehard_squeeze.c, trunk/diehard_craps.c,
	  trunk/dieharder.abs: This SHOULD BE DONE sort of, a full pass
	  through and version numbers bumped. However, I'm not hardly done
	  with rgb or sts -- they need the rest of the transformation
	  (although I've fixed the ks_pvalue thing so they should run). I'm
	  also getting some memory management strangeness when I try to
	  free memory in certain places. Hopefully it won't last.

* 2006-07-13 [r190]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/diehard_2dsphere.c,
	  trunk/diehard_3dsphere.c, trunk/diehard_squeeze.c, trunk/work.c,
	  trunk/diehard_sums.c (added): OK, this adds a NEW test, diehard
	  sums, and gets all the tests up to date through sums. Whew!

* 2006-07-12 [r189]  rgb <rgb@localhost>:

	* trunk/diehard_parking_lot.c: OK, that one was pretty quick...

* 2006-07-12 [r188]  rgb <rgb@localhost>:

	* trunk/diehard_count_1s_byte.c: Yet another. This is up to number
	  10, 11 done, six to go.

* 2006-07-12 [r187]  rgb <rgb@localhost>:

	* trunk/diehard_oqso.c, trunk/diehard_dna.c,
	  trunk/diehard_count_1s_stream.c: OK, here are three more
	  converted...

* 2006-07-12 [r186]  rgb <rgb@localhost>:

	* trunk/diehard_opso.c, trunk/diehard_oqso.c: Up to number 7. 9 to
	  go (runs being done, sorta).

* 2006-07-12 [r185]  rgb <rgb@localhost>:

	* trunk/diehard_opso.c, trunk/diehard_bitstream.c: Up to test
	  number 6. On to 7 in a bit... so to speak.

* 2006-07-12 [r184]  rgb <rgb@localhost>:

	* trunk/diehard_rank_32x32.c, trunk/histogram.c,
	  trunk/diehard_rank_6x8.c, trunk/diehard_operm5.c,
	  trunk/diehard_birthdays.c, trunk/diehard_bitstream.c: OK, all of
	  these tests are cleaned up and appear to function. I've fixed yet
	  another feature of histogram -- one that pretty much guarantees
	  that the entire histogram will be on scale even when all entries
	  are in a single column. In fact, it is probably the only scaling
	  required (the ceil() statement is likely NOT as desireable).

* 2006-07-12 [r183]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/histogram.c, trunk/startup.c,
	  trunk/rgb_persist.c, trunk/diehard_runs.c,
	  trunk/diehard_birthdays.c: This is a whole bunch of changes,
	  consistent with a major bugfix and decrufting release. * I've
	  fixed the order of diehard tests so they match diehard's order *
	  I've cleaned up runs and birthdays so birthdays in particular can
	  be a template for the rest. * I've discovered (damn!) that I'm
	  still missing the SUMS test! * I've fixed histogram() so that it
	  autoscales! At last!

* 2006-07-12 [r182]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/file_input.c,
	  trunk/file_input_raw.c: This cleans up and decrufts both the
	  file_input sources, makes them completely compatible and
	  self-similar EXCEPT for differences relevant to the raw vs cooked
	  issue, makes it so that get_rewind_cnt and get_rtot work for both
	  of them transparently. Next we need to clean up rgb_persist so
	  that it is a kind of Xtest with a vector of ks_pvalues to pass to
	  a final kstest and make a histogram out of. Then we have to clean
	  up ALL the tests, especially with regard to allocating variables
	  like ks_pvalues[] and rand_ints[].

* 2006-07-12 [r181]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/file_input.c, trunk/add_my_types.c,
	  trunk/startup.c, trunk/rgb_persist.c, trunk/list_rngs.c,
	  trunk/file_input_raw.c, trunk/help.c, trunk/parsecl.c: This is a
	  "dangerous" checkin, but we've resolved many of the problematic
	  details of the file_input interface (and learned a bit about the
	  gsl_rng interface in the process). I have to still fix
	  file_input_raw AND then patch ALL the tests.

* 2006-07-12 [r180]  rgb <rgb@localhost>:

	* trunk/dieharder.spec, trunk/diehard_runs.c, trunk/dieharder.abs:
	  This fixes an annoying and pernicious bug in diehard_runs(). I
	  don't think I'll bump the revision number (yet).

* 2006-07-12 [r179]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/startup.c, trunk/diehard_operm5.c: OK, I'm
	  calling it a wrap. It agrees perfectly with diehard's operm5 test
	  results when run on the same binary data file, I've tested
	  everything I can, I've fixed a wierd negative chisq problem that
	  MAY WELL suggest a numerical problem with e.g. r[][], s[][], or
	  map[] -- but at the moment it works at least as well as the old
	  diehard with the same data as the old diehard. diehard is now
	  completely swallowed within dieharder. I'm bumping the revision
	  to 1.0.21, meaning "diehard is finished", "initial revision, lots
	  bugs", "21 tests total supported". I believe I'll tag this
	  revision too, if svn tag works...

* 2006-07-12 [r178]  rgb <rgb@localhost>:

	* trunk/diehard_operm5.c: This MAY be completely and fully
	  functional. With the -O flag it precisely corresponds to diehard
	  (c version) on the same input binary file. The one problem that
	  remains is that all generators appear to fail this test (again)
	  and chisq ends being negative for certain runs, which cannot
	  happen. Or rather, SHOULD not be able too happen. It crashes
	  things when it happens. So I somewhat believe that I have a bug
	  (as it were) but if so, it is a very occassional one.

* 2006-07-12 [r177]  rgb <rgb@localhost>:

	* trunk/diehard_operm5.h, trunk/diehard_operm5.c: We'll hope that
	  this one is "good" and ready to have the statistic computation
	  part completed. It looks decent, anyway -- the right "kind" of
	  stuff in the frequency vector...

* 2006-07-11 [r176]  rgb <rgb@localhost>:

	* trunk/diehard_operm5.h (added), trunk/Makefile,
	  trunk/dieharder.h, trunk/dieharder.spec, trunk/diehard_opso.c,
	  trunk/startup.c, trunk/work.c, trunk/diehard_operm4.c (removed),
	  trunk/diehard_operm5.c (added): We need to check this in to
	  preserve the r, s and map matrices.

* 2006-07-11 [r175]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/diehard_count_1s_byte.c
	  (added), trunk/diehard_count_byte_1s.c (removed),
	  trunk/dieharder.spec, trunk/startup.c, trunk/work.c,
	  trunk/diehard_count_1s_stream.c, trunk/dieharder.abs: OK, this is
	  a working diehard_count_1s_byte. There is just ONE DIEHARD TEST
	  TO GO! I could finish this TODAY and announce the fact on e.g.
	  gsl list.

* 2006-07-11 [r174]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/diehard_count_1s_stream.c: One last time,
	  this fixes up the non-quiet test description in really useful
	  ways. I really need to do this for all tests, or else I need to
	  add a counter to all calls to the rng generator. I also need to
	  at the VERY LEAST add a counter to the file-based rng and print
	  out the total number of rewinds during each test...

* 2006-07-11 [r173]  rgb <rgb@localhost>:

	* trunk/diehard_count_1s_stream.c, trunk/NOTES: One last checkin to
	  get a comment into the sources as well. I should really clean up
	  the comments themselves as well, but perhaps I'll do so when
	  doing count_1s_byte next.

* 2006-07-11 [r172]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/Btest.c, trunk/bits.c,
	  trunk/diehard_count_1s_stream.c (added), trunk/diehard_count_1s.c
	  (removed): diehard_count_1s_stream() now WORKS! What a PITA! And
	  (I suspect) how unnecessary all the complexity! This test (as it
	  turns out) computes chisq on what amounts to a strangely remapped
	  rgb_bitdist test (precisely!) on four and five digit base 5
	  integers obtained by remapping bytes based on the number of 1's
	  therein. That is, 256 possibilities are reduced to 5, each with a
	  trivial-to-compute frequency/probability, the base 5 integer is
	  left shifted (base 5!) and added to the next one to cumulate 4 or
	  5 digit numbers, those numbers are then counted, and the counts
	  compared to the EXPECTED counts given the number of samples and
	  turned into chisq (one each, for 4 and for 5 digit numbers).
	  Sigh. OK then, we COULD just print the p-value of those chisq's
	  -- an absolutely straightforward process. Alternatively, we could
	  do what Marsaglia does -- compute the DIFFERENCE of the chisq's
	  themselves, which of course are supposedly distributed around the
	  number of degrees of freedom of each one separately, that is 3125
	  - 625 = 2500! This is the mean value of the difference, with
	  stddev = sqrt(2*2500). This final result is turned into a
	  p-value. This of course is wierd and wrong in so many ways. For
	  one, it is entirely possible for chisq_4 and chisq_5 to differ
	  systematically from their expected values, and it is perfectly
	  possible and likely that those deviations would occur in the same
	  direction -- e.g. down -- so that the 4 byte and 5 byte streams
	  BOTH have fewer degrees of freedom than expected. Of course in
	  this case part of the individual deviations CANCEL and is not
	  visible in the final p-value! Honestly, I can think of pretty
	  much "no" reasonable ways that this final pvalue can fail where
	  any/all of the p-values for the 4 or 5 (or 2 or 3 or 1 or 17)
	  digit distributions would not also fail, but I can (and just did)
	  think of a way that the final p-value might MARGINALLY pass while
	  the individual p-values fail. Although the general approach is a
	  good one, what is clearly needed is a new test -- one that
	  extends rgb_bitdist to multidigit strings of smaller base. For
	  example, right now rgb_bitdist tests the FREQUENCY of the
	  occurrence of all 5 digit strings but not all 5 digit strings
	  taken two at a time (32 x 32 = 1K possbilities). Of course one
	  REASON that I don't do that is that I >>already<< do e.g. 10 bit
	  strings -- the DIRECT frequency distribution of those 1K
	  possibilities, which obviously samples all the 5 bit combos taken
	  two at a time!. And besides, every rng I have tested fails at the
	  level of what amounts to two digit octal numbers -- six bit
	  strings. So I'm cynical about this. I also don't think that this
	  really counts 1's. How is this one iota different from simply
	  evaluating the distribution of bytes (8 bit randoms)? If the
	  complete distribution of 8 bit bytes (rgb_bitdist at 8 bits) is
	  random, ALL DERIVED DISTRIBUTIONS are random, with the only
	  catchy part being temporal/sequential correlations that might be
	  revealed from taking the strings four or five bytes at a time (at
	  the expense of compressing the information tremendously). Once
	  again, this test seems reduceable to but not as sensitive as
	  rgb_bitdist at a given level, unfortunately a level far beyond
	  where all known rng's fail anyway. It is a MEASURE of the lack of
	  sensitivity that this does does NOT fail for many of those rng's
	  where rgb_bitdist does...

* 2006-07-11 [r171]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/bits.c, trunk/startup.c,
	  trunk/work.c, trunk/diehard_count_1s.c: Check this in so we can
	  move diehard_count_1s

* 2006-07-11 [r170]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/NOTES, trunk/help.c, trunk/parsecl.c,
	  trunk/diehard_bitstream.c: This has -O to control overlap in
	  diehard tests, although I haven't retroactively implemented it in
	  say birthdays. First we finish the last three tests, THEN we
	  worry about toggling overlap in all the tests. Generally
	  speaking, overlap is silly and will no longer be done as I'm sure
	  it was an economy measure back in the mid-90's with storage past
	  the MB level at a premium cost (one beyond most PC owners).

* 2006-07-11 [r169]  rgb <rgb@localhost>:

	* trunk/diehard_bitstream.c, trunk/diehard_count_1s.c: Oh gladsome
	  day, calloo, callay -- bitstream doth work, and I feel gay. I
	  think that I'm going to introduce a new command line flag, -o for
	  "use overlap" for diehard tests where it is relevant/possible,
	  and by default NOT use overlap since that seems the best way by
	  far to really test the bitstreams, given the obvious bitlevel
	  correlations retained by left or right shifting a "random" bit
	  pattern.

* 2006-07-08 [r168]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.spec,
	  trunk/bits.c, trunk/diehard_oqso.c, trunk/diehard_dna.c,
	  trunk/startup.c, trunk/work.c, trunk/diehard_bitstream.c,
	  trunk/dieharder.abs: This is the bitstream test. I'm down to
	  operm5, which looks relatively "difficult", and two count the
	  ones tests, which look easy. I'll probably do easy first, then
	  finish off with operm5. I'm not absolutely certain that bitstream
	  is valid -- BOTH mt1997 and rndldx2 fail it! Of course, I've
	  implemented it to be more sensitive than diehard was with a much
	  more serious and revealing KS test on the larger number of
	  psamples. I'm going to try the semi-hardware rng and then the
	  hardware rng. If those fail it, the test is probably flawed in
	  some subtle way...

* 2006-07-08 [r167]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.spec,
	  trunk/diehard_opso.c, trunk/diehard_oqso.c, trunk/startup.c,
	  trunk/work.c, trunk/dieharder.abs: OK, that was fast. Looks like
	  oqso works as well, probably well enough to fire up yet another
	  revision...

* 2006-07-08 [r166]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/diehard_opso.c, trunk/dieharder.abs: I
	  dunno, maybe I should "tag" it, but I don't know that it matters.
	  The diehard tests are falling, falling -- quickly now. Hopefully
	  QPSO will be a simple adaptation of OPSO.

* 2006-07-08 [r165]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.spec,
	  trunk/diehard_opso.c, trunk/bits.c, trunk/startup.c,
	  trunk/work.c, trunk/dieharder.abs: This is worth checking in,
	  lest we lose everything. opso almost/maybe works, actually, but
	  there is something still a bit flaky in it. I need to do some
	  more testing and remove the debugging cruft when I'm done.

* 2006-07-08 [r164]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/diehard_squeeze.c,
	  trunk/work.c, trunk/diehard_craps.c: This is a working squeeze
	  test, ready to have the version number bumped and documentation
	  fixed yet again.

* 2006-07-07 [r163]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.spec,
	  trunk/startup.c, trunk/work.c, trunk/dieharder.1, trunk/NOTES,
	  trunk/diehard_craps.c, trunk/dieharder.abs: This is dieharder
	  0.6.13, where the 6 means that files are now supported (last
	  major revision bump) and the 13 means that there are now 13
	  supported tests include 8/10 diehard tests! We are making serious
	  progress here -- perhaps one more day of middling hard work, a
	  bit of debugging on the one test with a screwed up histogram of
	  values, and I might (finally) have COMPLETED diehard's
	  encapsulation. Then I only have to increase the visibility of the
	  project and I'm in great shape. This might even be worth
	  announcing on the gsl list (again).

* 2006-07-07 [r162]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/sts_monobit.c,
	  trunk/startup.c, trunk/work.c, trunk/help.c,
	  trunk/diehard_parking_lot.c: This appears to be a semi-final
	  checkin for the parking lot test, which -- as it happens -- is
	  very, very insensitive. I'm still struggling to find a generator
	  that fails it in gsl, alas.

* 2006-07-06 [r161]  rgb <rgb@localhost>:

	* trunk/dieharder.abs: OK, added a new section on using it with
	  gentoo and a link to the only remaining diehard mirror.

* 2006-07-05 [r160]  rgb <rgb@localhost>:

	* trunk/startup.c: Fixed a tiny casting problem in startup().

* 2006-07-05 [r159]  rgb <rgb@localhost>:

	* trunk/parse.h (added): This is interesting. I continue to leave
	  key files out of SVN. Sigh.

* 2006-07-05 [r158]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.spec, trunk/dieharder.1,
	  trunk/file_input_raw.c, trunk/dieharder.abs: This is a final
	  commit with the right version numbers, an updated abstract and
	  man page, just basically documented and so on.

* 2006-07-05 [r157]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/sample.c, trunk/startup.c,
	  trunk/file_input_raw.c: OK, this fixes a few small things that
	  cause failure on files (like reseeding once per sample, which
	  skews the sample distributions like crazy).

* 2006-07-05 [r156]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/file_input_raw.c: This REALLY almost
	  works now, although I completely and totally rewrote it compared
	  to last time I said that. This version counts the ints to be had
	  and precisely cycles the file.

* 2006-07-04 [r155]  rgb <rgb@localhost>:

	* trunk/file_input.c, trunk/add_my_types.c, trunk/startup.c,
	  trunk/file_input_raw.c: This actually works, sort of. It reads in
	  the binary file well enough, and from the look of things the test
	  "works" on the data, rewinding the file every time it runs out
	  The biggest problem is that I need a LOT of rands to actually
	  pass the tests, I think...

* 2006-07-04 [r154]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/file_input_raw.c
	  (added), trunk/diehard_runs.c: This is a first cut for
	  file_input_raw, ready to test except for a lack of debugging
	  statements and no way to activate it on e.g. the command line and
	  it not being added to the list of gsl-supported generators and
	  all that. But it is close... and hey, it might work.

* 2006-06-26 [r153]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/file_input.c, trunk/bits.c,
	  trunk/testrands.dat.bin (added): This is at this moment
	  completely functional for at LEAST type 'd' and type 'b'. It
	  would be fun to somehow be able to flag output file type and
	  force different kinds of rand lists to be stored (since e.g. hex
	  is more efficient than decimal) but NOT NOW.

* 2006-06-26 [r152]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dev_random.c, trunk/file_input.c,
	  trunk/add_my_types.c, trunk/startup.c, trunk/parsecl.c,
	  trunk/parse.c: This appears to be a completely working version of
	  the program. The only real hassle is the warning on rewind -- I
	  should really be sure to send this to stderr so it can go away on
	  a pipe into an output file.

* 2006-06-26 [r151]  rgb <rgb@localhost>:

	* trunk/testrands.dat (added), trunk/output_rnds.c: OK, this pretty
	  much does the output_rnds() call for the time being. It is simply
	  lovely. Now I need to return to file_input.c and get the program
	  to where it can read this IN.

* 2006-06-26 [r150]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/startup.c, trunk/work.c,
	  trunk/output_rnds.c, trunk/parsecl.c: This now supports -o for
	  output, sort of. A bit ugly but easy to fix in time. NOW to use
	  THIS to test file-based INPUT!

* 2006-06-26 [r149]  rgb <rgb@localhost>:

	* trunk/startup.c, trunk/work.c, trunk/output_rnds.c (added),
	  trunk/help.c, trunk/parsecl.c: I'm most of the way through adding
	  support for dieharder -o testrands.dat so that I can turn around
	  and run dieharder -f testrands.dat -r 2 to run rgb test 2 on file
	  data with the default parameters. -o will supercede any other
	  commands (in work.c) and get executed FIRST, but one CAN use
	  dieharder -o testrands.dat -r 2 to simultaneously create an
	  output file and use it as input for a test or suite of tests. I
	  think -- this may take some tuning to get just right...

* 2006-06-26 [r148]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/block.c: This is a "perfect" build, and
	  hence should be checked in. Now all I need is a list of random
	  numbers in a file to test.

* 2006-06-26 [r147]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/file_input.c (added),
	  trunk/parse.c: This now builds, although I have no idea if it
	  will actually work. I rather doubt it...

* 2006-06-26 [r146]  rgb <rgb@localhost>:

	* trunk/Makefile: Well, this one seems to be going in.

* 2005-03-14 [r145]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/parse.c (added): This sends in
	  parse.c. Y'know, I'll bet that this is what breaks Dan's access.
	  Shit, looks like I'll have to kiss "make sync" goodbye... or give
	  him an "account" locally with the same uid/gid -- nope that won't
	  work either. Sigh.

* 2005-03-11 [r144]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/work.c: This goes home and into
	  laptop...

* 2005-03-11 [r143]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Sending this all home, so I can make it
	  on metatron?

* 2005-03-11 [r142]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/rgb_timing.c (added),
	  trunk/work.c: This checks in a fairly crude but still useful
	  timing test.

* 2004-11-30 [r141]  rgb <rgb@localhost>:

	* trunk/dieharder.all (added), trunk/dieharder.cvs.time: I think
	  we'll add this to the repository as the "reference run" against
	  the default generator, dieharder -a > dieharder.all. If we update
	  this at the end of every new addition, we'll be able to advance
	  to toolset in a fairly systematic (but generally reliable) way.

* 2004-11-29 [r140]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: This looks like it ran nicely.

* 2004-11-29 [r139]  rgb <rgb@localhost>:

	* trunk/diehard_2dsphere.c, trunk/Makefile,
	  trunk/diehard_rank_32x32.c, trunk/dieharder.h,
	  trunk/rgb_bitdist.c, trunk/diehard_3dsphere.c,
	  trunk/dieharder.cvs.time, trunk/histogram.c (added),
	  trunk/diehard_rank_6x8.c, trunk/sts_runs.c, trunk/sts_monobit.c,
	  trunk/diehard_runs.c, trunk/diehard_birthdays.c, trunk/parsecl.c,
	  trunk/rank.c: This MIGHT just be a reference run followed by tag
	  bump and checkin. Looks pretty nifty, right up to a first draft
	  of histogram.

* 2004-11-29 [r138]  rgb <rgb@localhost>:

	* trunk/diehard.f90 (added), trunk/dieharder.cvs.time: Adding the
	  published diehard F90 source code to the tree for porting
	  convenience, although we will not use any of it verbatim,
	  obviously, in a c port.

* 2004-11-29 [r137]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/rank.c (added): I'm hoping that
	  this is the needed binary rank program that analyzes binary
	  (bitlevel) matrices for the diehard binary rank tests.

* 2004-11-24 [r136]  rgb <rgb@localhost>:

	* trunk/diehard_rank_32x32.c, trunk/dieharder.cvs.time: This seems
	  to "work", although it is consistently producing an overall
	  p-value that is in the .9 range and hence "too high". I'm going
	  to start up a full run of 100 x 40000 in a second to see if I get
	  a "normal" pvalue.

* 2004-11-24 [r134-135]  rgb <rgb@localhost>:

	* trunk/diehard_rank_32x32.c, trunk/dieharder.cvs.time: Well, not
	  JUST that. I suppose that next we'll have to actually debug.

	* trunk/diehard_rank_32x32.c, trunk/Makefile, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/diehard_rank_6x8.c (added),
	  trunk/work.c, trunk/startup.c, trunk/help.c: This is ALMOST
	  working. I'd say the binary rank part is working, hence the
	  checkin. It is the rank_32x32 part that isn't, but I'll work on
	  it. I suspect something really simple, like needing to normalize
	  y by tsamples...

* 2004-11-22 [r133]  rgb <rgb@localhost>:

	* trunk/diehard_rank_32x32.c, trunk/Makefile, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/startup.c, trunk/doc/tests.txt
	  (added), trunk/help.c: This is simply lovely, simply lovely, with
	  a good start on adding Diehard's Binary Rank test. All I need is
	  a suitably scaled matrix and a few zillion rands...

* 2004-11-22 [r132]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Why didn't these make it to Duke?

* 2004-11-22 [r131]  rgb <rgb@localhost>:

	* trunk/dieharder.php, trunk/dieharder.cvs.time,
	  trunk/dieharder.abs: This is 0.5.8 stable, I hope. Time to go
	  beddy-bye, hoping that this is now ready for real development and
	  grantseeking work. I should be able to add a couple more diehard
	  tests "easily" at this point, I think. rgb

* 2004-11-22 [r129]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/startup.c,
	  trunk/work.c, trunk/dieharder.1, trunk/diehard_runs.c,
	  trunk/help.c, trunk/diehard_birthdays.c, trunk/parsecl.c: This is
	  VERY VERY close to being a fairly serious tagged checkin. We've
	  resolved the problem of multiline strings in gcc, snagged a C
	  tutorial for gcc, completely fixed the documentation -- this is
	  all pretty awesomely ready for a brave new release.

* 2004-11-22 [r128]  rgb <rgb@localhost>:

	* trunk/measure_rate.c, trunk/list_rand.c, trunk/sts_runs.c,
	  trunk/sample.c, trunk/work.c, trunk/rgb_persist.c, trunk/help.c
	  (added), trunk/parsecl.c, trunk/diehard_2dsphere.c,
	  trunk/Makefile, trunk/dieharder.h, trunk/rgb_bitdist.c,
	  trunk/dieharder.cvs.time, trunk/diehard_3dsphere.c,
	  trunk/dieharder.spec, trunk/sts_monobit.c, trunk/bits.c,
	  trunk/startup.c, trunk/diehard_runs.c, trunk/diehard_birthdays.c:
	  This is really close to working with all the changes in the
	  command line options and associated global variables. In fact, it
	  might BE working. Two things that I really really need are a
	  routine that can take a data object that is one big string and
	  display it to the screen (something gcc refuses to do any more,
	  which sucks big time) and a 20x histogram of p-values. Let's see
	  if I can find them on the web before tackling them -- in
	  particular the former seems like it must have been written by
	  somebody...

* 2004-11-20 [r127]  rgb <rgb@localhost>:

	* trunk/kstest.c, trunk/list_rand.c, trunk/add_my_types.c,
	  trunk/Btest.c, trunk/diehard_dna.c, trunk/work.c,
	  trunk/diehard_operm4.c, trunk/diehard_osums.c, trunk/timing.c,
	  trunk/dieharder.c, trunk/diehard_2dsphere.c, trunk/Ntest.c,
	  trunk/empty_random.c, trunk/dieharder.spec, trunk/diehard_opso.c,
	  trunk/sts_monobit.c, trunk/diehard_oqso.c, trunk/bits.c,
	  trunk/diehard_squeeze.c, trunk/startup.c, trunk/dev_urandom.c,
	  trunk/NOTES, trunk/Xtest.c, trunk/chisq.c, trunk/diehard_runs.c,
	  trunk/diehard_birthdays.c, trunk/dieharder.abs,
	  trunk/diehard_count_1s.c, trunk/diehard_rank_32x32.c,
	  trunk/measure_rate.c, trunk/dev_random.c, trunk/random_seed.c,
	  trunk/sts_runs.c, trunk/sample.c, trunk/rgb_persist.c,
	  trunk/diehard_craps.c, trunk/diehard_parking_lot.c,
	  trunk/parsecl.c, trunk/Makefile, trunk/rgb_bitdist.c,
	  trunk/confidence.c, trunk/diehard_3dsphere.c,
	  trunk/dieharder.cvs.time, trunk/diehard_count_byte_1s.c,
	  trunk/prob.c, trunk/list_rngs.c, trunk/diehard_bitstream.c: This
	  is now really truly ready to go, EXCEPT that NOW I have to alter
	  all sorts of command options according to the latest
	  prescriptions in the checkin logs and abstract/web page. And get
	  it "working perfectly" once again. I might even finish this this
	  weekend, if I really hammer at it.

* 2004-11-20 [r126]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/doc/fnal_prob.pdf (added),
	  trunk/tests.txt (removed), trunk/doc/cern_stats.pdf (added),
	  trunk/doc/goodness_of_fit_nr.pdf (added), trunk/doc (added),
	  trunk/doc/diehard_tests.txt (added), trunk/doc/SP800-22b.pdf
	  (added): This is the REALLY final checkin of rand_rate, I think,
	  before we clone it into dieharder.

* 2004-11-20 [r125]  rgb <rgb@localhost>:

	* trunk/diehard_rank_32x32.c (added), trunk/diehard_dna.c (added),
	  trunk/diehard_operm4.c (added), trunk/diehard_osums.c (added),
	  trunk/diehard_craps.c (added), trunk/diehard_parking_lot.c
	  (added), trunk/dieharder.cvs.time, trunk/diehard_count_byte_1s.c
	  (added), trunk/dieharder.spec, trunk/tests.txt (added),
	  trunk/diehard_opso.c (added), trunk/diehard_squeeze.c (added),
	  trunk/diehard_oqso.c (added), trunk/dieharder.abs,
	  trunk/diehard_bitstream.c (added), trunk/diehard_count_1s.c
	  (added): This is the last checkin of rand_rate AS rand_rate. I'm
	  going to change the name of this suite to dieharder. I'm also
	  going to change the test numbering schema and option naming so
	  that e.g. -d diehard test number -r rgb test number -s sts test
	  number where -1 runs all tests of a given kind, 0 lists a
	  description of all tests in the suite, -2 runs all tests of a
	  given kind EXACTLY as they are run in the original code, if
	  possible -- I'm not sure I'm going to test overlapping bit
	  strings drawn from a single int just to bump the count of "random
	  numbers" unless the test explicitly calls for it and it makes
	  sense, as there is this thing about each sample being
	  "independent" that worries me with overlapping draws. -p number
	  of p-values in final KS (and possibly other) test(s). This is the
	  number of times each "test" is run with independent random number
	  seeds (as the DEFAULT from now on). This defaults to 100, which
	  is actually a lot and very reasonable but which can be increased
	  if one is in doubt about whether the distribution of p returned
	  by "the test" is in fact uniform. -t number of test samples that
	  go into making up a single test. This is NOT always a free
	  parameter -- in many of the diehard tests especially, the number
	  of e.g. points drawn from a 2d or 3d volume in the minimum
	  distance tests is fixed, and varying it would vary the target
	  distribution and test statistic. Although this is a bit
	  unfortunate, since varying the number of test samples is an
	  excellent way to make marginal failures in the distribution of p
	  resolve into clear failures, we either live with it or derive
	  general forms for the asymptotic target distributions as a
	  function of the number of samples or do simulations and
	  empirically deduce forms ditto (as Marsaglia and others appear to
	  have done). For the moment we'll live with it. -b bitstring
	  width. Some tests are applied only to samples that are
	  "bitstrings" (as opposed to e.g. lists of unsigned integers) of
	  user-specifiable length. One reason to limit the tests in this
	  way is to avoid numerical difficulties in e.g. evaluating
	  P_binomial(k,p,n), where one can easily under or overflow and end
	  up with garbage or a gsl fault. Another is to "free" some of the
	  existing tests that have a very specific size of bitstring that
	  they look at so that this can be varied when the target
	  distribution can still be computed as a function of bitstring
	  size. This will be overridden as necessary, like -t, for tests
	  that really do require a fixed bitstring size to approach the
	  known target distribution. -n ntuple or window width. A number of
	  tests look at bit ntuples. An ntuple is a set of n consecutive
	  bits drawn from a bitstring (possibly of -b specified width) or
	  vector of random uints (possibly of -t specified length). ntuples
	  are always drawn relative to a bit offset specified from the
	  right (least significant) with 0 being the rightmost bit, with
	  cyclic boundary conditions on the entire bitstring >>or<< sample
	  uint vector, so drawing an ntuple cannot fail for any offset
	  within the number of significant bits returned by the generator
	  (which MAY NOT BE 32, or even 31 -- some generators return as few
	  as 16 significant bits!). For example, an 8-bit bitstring might
	  be: 01100111 and all the 3-tuples drawn from it are given by
	  offset 3-tuple ===================== 0 111 1 011 2 001 3 100 4
	  110 5 011 6 101 <- Note wrap around! 7 110 <- Ditto! A general
	  purpose get_bit_ntuple(*bitstring,bitstring size,ntuple
	  size,offset) routine is provided that is used by many tests to
	  get ntuples from a uint *bitstring of given >>uint vector
	  length<< (not bitstring length). Other test controls may be added
	  as well, but these are what I'm going to document right now.
	  Mostly I'm checking in all the placeholders required for the rest
	  of the diehard tests so I can start to knock them off
	  systematically. Sure hope I'm past major rewrites!

* 2004-11-20 [r124]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/diehard_2dsphere.c,
	  trunk/diehard_3dsphere.c, trunk/dieharder.cvs.time,
	  trunk/sts_monobit.c, trunk/sts_runs.c, trunk/sample.c,
	  trunk/diehard_runs.c, trunk/diehard_birthdays.c: Fixed silly
	  spelling error (sigh).

* 2004-11-20 [r122-123]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/diehard_runs.c: Well, that was
	  quick. A nasty (but easy) little bug in diehard_runs squashed
	  (size -> tsamples).

	* trunk/Makefile, trunk/diehard_2dsphere.c, trunk/dieharder.h,
	  trunk/diehard_3dsphere.c, trunk/dieharder.cvs.time: This
	  should/maybe be a serious v 0.5.3 checkin. We are about to try -v
	  -1. If it works, it will cycle through all of the working tests
	  (and all the tests are working). All the tests are now written in
	  a way that they can use sample and kstest_kuiper() to do the
	  validation of the p-values obtained from running a possibly
	  size-variable test on bits or frequencies or runs or whatever. If
	  this test works, it is off to the website, I'm off to bed, and
	  next we go back to moving in new diehard tests. With the magical
	  sliding bitwindow (which really does seem to work pretty well:-)
	  implementing at least the n-tuple diehard tests should now be
	  pretty easy, and I can probably do a more rigorous job than GM
	  did because I don't have to scrimp on rands.

* 2004-11-20 [r119-120]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Try again (network down).

	* trunk/diehard_2dsphere.c, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/dieharder.spec, trunk/chisq.c,
	  trunk/diehard_runs.c, trunk/diehard_birthdays.c,
	  trunk/dieharder.abs: This clears diehard_birthdays AND
	  diehard_2dsphere. Only one diehard to go and we'll have
	  EVERYTHING running with sample and the new test format (but of
	  course rgb_persist, which doesn't count).

* 2004-11-20 [r118]  rgb <rgb@localhost>:

	* trunk/measure_rate.c, trunk/rgb_bitdist.c, trunk/dieharder.h,
	  trunk/Makefile, trunk/dieharder.cvs.time, trunk/dieharder.spec,
	  trunk/work.c, trunk/diehard_runs.c, trunk/dieharder.abs: Fixed up
	  diehard_runs so it uses the new test format. Works charmlike.

* 2004-11-19 [r117]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/sts_runs.c,
	  trunk/Xtest.c: This is v 0.5.1, which is nicely fixed for BOTH
	  sts_monobit AND sts_runs, both in the new format, with a
	  consistent Xtest_eval() routine. This fixes lots of things --
	  both tests are very likely to be "good".

* 2004-11-19 [r115]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/sts_runs.c,
	  trunk/sts_monobit.c, trunk/startup.c, trunk/Xtest.c: OK, this
	  looks like sts_runs is now "good" in the new format. However, it
	  may have broken sts_monobit. The problem is, is there or is there
	  not a sqrt(2.0) in the erfc relative to sigma, and if there is is
	  there an EXTRA one in sts_runs vs sts_monobit. Need to clear this
	  up and either always put it into Xtest or always put it into
	  xtest.sigma, but not both.

* 2004-11-19 [r114]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Sending this home, I hope.

* 2004-11-19 [r113]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/sts_runs.c,
	  trunk/sts_monobit.c: This is now squeaky clean for rgb_bitdist
	  and sts_monobit, and we're working on sts_runs. Then a quick dash
	  through the diehards and we'll be back to where we were but a bit
	  cleaner. I still MIGHT try to get cleaner still. I'm not at all
	  convinced that I need the test structs, for example, although
	  perhaps they allow some encapsulation that is useful.

* 2004-11-19 [r112]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/sts_monobit.c,
	  trunk/Xtest.c: This is a checkin to Duke of the nifty neato cool
	  new improved version. It may be time to change the name and
	  everything.

* 2004-11-19 [r111]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time, trunk/sample.c: OK
	  so there was one more teeny bug in rgb_bitdist() -- wrong order
	  in the final output statement. Fixed. I also added a feature,
	  reseeding the rng in sample on an -i flag.

* 2004-11-19 [r108-110]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time: This is just ensuring
	  that the tag for version 0.5.0 is noted. This version works
	  through rgb_bitdist, which I'll bet a nickel is a very powerful
	  test indeed.

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time, trunk/kstest.c,
	  trunk/Btest.c: This is a "permanent" checkin. I think that this
	  fixes rgb_bitdist nicely to use sample() and provides a prototype
	  for doing other tests.

* 2004-11-19 [r107]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/Makefile, trunk/dieharder.h,
	  trunk/kstest.c, trunk/dieharder.spec, trunk/sample.c,
	  trunk/startup.c, trunk/work.c, trunk/dieharder.c,
	  trunk/dieharder.abs: This is actually a pretty damn functional
	  run. The remaining problem is that the pearson chisq appears to
	  be failing for very large numbers of samples (and very few bins
	  populated) where the relative error in the smaller bins is vastly
	  amplified relative to the principle (0) bin.

* 2004-11-19 [r106]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/rgb_bitdist.c,
	  trunk/dieharder.cvs.time, trunk/bits.c, trunk/work.c,
	  trunk/rgb_binomial.c (removed), trunk/parsecl.c: This is a fairly
	  major fix -- I was truncating blen in bits.c at the sizeof(uint),
	  not 8*sizeof(uint). One lesson is that this truncation isn't
	  right anyway. We rather need to just punt/die. I'm wondering now
	  if the apparent failure that is still present (although not
	  nearly as bad) for the larger ntuples is because fewer bins pass
	  the cutoff in the formation of the primary sample pvalue(s). We
	  might just try lowering this cutoff a bit. I don't know exactly
	  what a "degree of freedom" is, but we do need to be pretty
	  careful with it.

* 2004-11-18 [r105]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time: Now it REALLY
	  looks like it works, and even the best rng's look like they FAIL
	  the test in fairly short order. Now we're cookin' with gas,
	  although I've got to see the details of the failure soon enough.
	  Hmmm, maybe I need to have a lot more bins...

* 2004-11-18 [r104]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time: Just to verify
	  that it APPEARS to work to quite high precision through triplets.
	  We could just keep adding things, I suppose...

* 2004-11-18 [r103]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/rgb_bitdist.c, trunk/dieharder.cvs.time:
	  This is now working. Working amazingly well, actually. Well
	  enough to double the size of the bits in rgb_bitdist_test(). The
	  one MAJOR remaining problem is that I cannot use samples for
	  tests that return a vector of pvalues. Oh, and it is fairly
	  difficult to pass arguments to the testing function in when it is
	  an argument TO samples(). This means that I have two itty bitty
	  problems to solve -- one is to pass in parameters (possibly by
	  making them global variables). This makes sense IF I want to be
	  able to control them from the command line anyway. The other is
	  to return a vector of pvalues. The only way I can think of doing
	  this is to make pvalues[] a global vector as well of length (say)
	  1K. This puts an upper bound on the number of pvalues that can be
	  returned by a test, but that SHOULDN'T be much of a problem, as
	  it is really a question of what granularity one wishes to
	  evaluate p at. Anyway, just a BIT more work and rgb_bitdist
	  should be production ready, AND I should be perfectly ready to
	  clean up p-sampling and testing as separate entities in the other
	  tests.

* 2004-11-18 [r102]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time, trunk/bits.c: This
	  MIGHT be working.

* 2004-11-18 [r101]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: I sent this home, I did, I did.

* 2004-11-18 [r100]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/rgb_bitdist.c,
	  trunk/dieharder.cvs.time, trunk/Btest.c, trunk/bits.c,
	  trunk/work.c, trunk/startup.c, trunk/parsecl.c, trunk/rgb_bit2.c
	  (removed): This is still fairly screwed up, at least in the sense
	  that it doesn't look like rgb_bitdist works. Curiously, it LOOKS
	  like it WORKS -- walking through the code, it looks VERY much
	  like it is collecting two bits at a time and correctly
	  incrementing the correct bit count in the correct vector. The
	  final histogram, however, comes out wrong, wrong, wrong. I may
	  have to make this simpler. Or maybe I'm doing something else
	  wrong -- come to think of it, the totals in the histograms
	  shouldn't equal the number of samples for EACH value of the
	  ntuple, only the total should sum to the number of samples. Maybe
	  this is what is wrong...

* 2004-11-18 [r99]  rgb <rgb@localhost>:

	* trunk/diehard_2dsphere.c, trunk/rgb_bitdist.c,
	  trunk/diehard_3dsphere.c, trunk/dieharder.cvs.time,
	  trunk/dieharder.spec, trunk/sts_monobit.c, trunk/sts_runs.c,
	  trunk/bits.c, trunk/rgb_persist.c, trunk/rgb_binomial.c,
	  trunk/diehard_runs.c, trunk/chisq.c, trunk/diehard_birthdays.c,
	  trunk/rgb_bit2.c, trunk/dieharder.abs: We have to go into Duke,
	  but we are very much ready to finish off bits.c and rgb_bitdist.c
	  to where we can eliminate BOTH rgb_binomial AND rgb_bit2.c AND at
	  least one, maybe 3-4 diehard tests AND a couple or three sts
	  tests as being equivalent to this test, for particular call
	  values. I have great hope that this rgb_bitdist will become "the"
	  bit frequency test for all random bit sequences. There may still
	  be a point to tests that look at intervals >>between<< bit
	  sequences thought. In fact, I suspect that the best way to
	  proceed with the latter is to test lagged correlation for
	  arbitrary lags in a long bitstring. This SAME TEST applied with
	  arbitrary displacements between samples might be revealing...

* 2004-11-17 [r98]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/rgb_bitdist.c, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/sample.c (added),
	  trunk/parsecl.c: This is HIGHLY BROKEN but is absolutely
	  necessary. We have to break this code up to unify the replicated
	  pieces and streamline the testing processes now that we know how
	  a test "works" in the abstract.

* 2004-11-17 [r97]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/dieharder.spec,
	  trunk/bits.c, trunk/Btest.c, trunk/dieharder.abs: A bugfix
	  commit. The sanity check in get_bit() is broken and is commented
	  out -- if I'm going to allocate rand_int[] vectors other than
	  size in length, I cannot test on a global size to see if
	  get_bit() is out of bounds. This is STILL broken in that there is
	  a risk with no warning, but there is also functionality for the
	  moment (and I have to write a bunch of new bitlevel functions and
	  can rewrite get_bits at the same time). More important, I found a
	  real bug in Btest where I was initializing btest->chisq to zero
	  before accumulation but was accumulating in chisq. Curiously, it
	  worked a lot of the time the old way, but only for certain rng's.
	  I may have memory management problem, which isn't surprising
	  given the slovenliness of the code at this moment...;-) rgb

* 2004-11-16 [r94-96]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: This is a tagged checkin, about to
	  push.

	* trunk/kstest.c, trunk/dieharder.cvs.time, trunk/rgb_binomial.c:
	  This appears ready for a checkin.

* 2004-11-16 [r93]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/Makefile, trunk/dieharder.cvs.time,
	  trunk/Btest.c (added), trunk/rgb_binomial.c, trunk/chisq.c: This
	  appears to FINALLY fix rgb_binomial so that it reliably works. It
	  remains to be seen whether or not it is any more senstitive than
	  e.g. sts_monobit.

* 2004-11-16 [r92]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/Ntest.c, trunk/kstest.c,
	  trunk/dieharder.cvs.time, trunk/bits.c, trunk/startup.c,
	  trunk/rgb_binomial.c, trunk/chisq.c: This is STILL broken as far
	  as the Ntests are concerned. I've really got to figure this
	  out...

* 2004-11-16 [r91]  rgb <rgb@localhost>:

	* trunk/diehard_2dsphere.c (added), trunk/Makefile,
	  trunk/dieharder.h, trunk/diehard_3dsphere.c,
	  trunk/dieharder.cvs.time, trunk/dieharder.spec, trunk/work.c,
	  trunk/rgb_binomial.c, trunk/dieharder.abs: Send this to Duke to
	  finish this morning.

* 2004-11-14 [r90]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/diehard_3dsphere.c, trunk/kstest.c,
	  trunk/dieharder.cvs.time, trunk/diehard_runs.c,
	  trunk/diehard_birthdays.c: This is a pretty serious bugfix --
	  probably need to update the website. Basically, my kstest was
	  simply wrong last night; now it is working, I've also added the
	  Kuiper form of the KS test, and will program Anderson and
	  Darling's version (the one used, apparently, in Diehard) when I
	  get around to it. However, for tests involving more than a very
	  few p-values in a vector, it shouldn't really matter -- Kuiper KS
	  and the regular KS and Anderson-Davis KS should all GENERALLY
	  generate similar p-distributions -- different perhaps where they
	  don't matter, but very similar at the ends. The key question is
	  just whether one has a tendency to pass a vector of p-values
	  where the other would consistently fail it. So far it looks like
	  USUALLY if one fails the other fails. I think I'm still going to
	  want to do a histogram picture of binned pvalues and do a Pearson
	  chisq p-test on the result. This should really be pretty easy...
	  maybe today, maybe not. We're getting close to being ready to go
	  BACK and mess with the Ntest and Xtest stuff. I think that now
	  that I understand Pearson vs the alternatives, I can PROBABLY
	  arrange things so that I can use a single set of common tools to
	  do all the test assessment. One thing, for example, would be to
	  make each test return a p-value, period, and put the samples loop
	  in rand_rate_work, to ALWAYS fill a vector of p-values and ALWAYS
	  do KS tests, confidence interval tests, and histogram tests. This
	  would have a number of advantages -- being able to produce a
	  really pretty, really standardized picture of results for one. A
	  second thing that would make this tool relatively interesting to
	  the mass unwashed would be to put a nice little GUI onto it.
	  There are two generic ways to do this. One is to leave it a
	  command line tool but REALLY clean up the output result so that
	  it is just a single line per test with ks test scores for the
	  various forms of test with three lines of # delimited frame,
	  period. Then I can make a perl-Gtk app to call the binary, parse
	  the result, and (e.g.) plot histograms or do other nifty
	  graphical things. The other is to use Gtk directly, but perhaps
	  have the GUI only come up if there is an appropriate command line
	  flag (or not). A third thing to work on is clearly going to be
	  splitting the source into distinct components in distinct
	  directories. We will need a common library containing the kstest,
	  chisq, Ntest, Xtest etc code, the input, the output, etc. We will
	  need a directory containing extensions to the GSL random number
	  library, e.g. /dev/random, /dev/urandom, empty, and shuffled
	  because the one thing that is absolutely true is that we need to
	  add a shuffling/mixing random number generator, one that permits
	  us to set up a shuffling list and refill it from a secondary LIST
	  of rng's! A fourth thing (noted already elsewhere) is to do the
	  simplest of tests -- apply a KS test to the GSL
	  distribution-specific generators themselves. If a "test" is
	  generically generating a known distribution presuming randomness
	  and then seeing if the result is indeed the targeted
	  distribution, then EVERY distribution generator in the GSL can
	  simultaneously be the target of a test for algorithmic purposes
	  AND a test component for the GSL rng's. Beyond that, I need to
	  implement spectral tests and tests for hyperplanes in N
	  dimensions and uniformity tests. Sigh. I think that I DO need to
	  write a grant proposal for this -- I think there is enough work
	  to justify it.

* 2004-11-14 [r87-89]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Tagged and on the repository as 0.4.3,
	  with diehard 3d spheres and a MAYBE working KS test.

	* trunk/Makefile, trunk/dieharder.h, trunk/diehard_3dsphere.c,
	  trunk/kstest.c, trunk/dieharder.cvs.time, trunk/dieharder.spec,
	  trunk/diehard_runs.c, trunk/diehard_birthdays.c,
	  trunk/dieharder.abs: Sort of playing with KS -- I'm not done here
	  yet...

* 2004-11-14 [r86]  rgb <rgb@localhost>:

	* trunk/diehard_3dsphere.c, trunk/dieharder.cvs.time: OK, found my
	  REALLY stupid bug. I was computing the absolute length of r from
	  the origin, not the distance between point pairs. No, I wasn't
	  even doing that well -- I was computing the dot product of the
	  random vectors. Now things look nearly correct. All I need is a
	  KS test and life would be, if not complete, well, worth living.

* 2004-11-14 [r85]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/diehard_3dsphere.c,
	  trunk/dieharder.cvs.time, trunk/block.h (added), trunk/tensor.h
	  (added), trunk/matrix.c (added), trunk/matrix.h (added),
	  trunk/block.c (added), trunk/tensor.c (added): This "works".
	  Except that it doesn't. It's very odd, but although it works
	  perfectly as far as I can tell by any measure, r is simply not as
	  small as it should be in order to make the pvalue come out
	  between 0 and 1.

* 2004-11-14 [r84]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/Makefile, trunk/diehard_3dsphere.c
	  (added), trunk/dieharder.cvs.time, trunk/dieharder.spec,
	  trunk/work.c, trunk/chisq.c, trunk/diehard_birthdays.c,
	  trunk/dieharder.abs: THis is on the way to being another test.

* 2004-11-13 [r83]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/dieharder.abs:
	  This is hopefully a tagged snapshot with a new test!

* 2004-11-13 [r81]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/Ntest.c, trunk/dieharder.cvs.time,
	  trunk/chisq.c, trunk/diehard_birthdays.c: OK, time to bump the
	  revision number, as birthdays is home and even works tolerably,
	  as far as I can tell. SOON I'm going to do the KS test on vectors
	  of p's. SOON I'm going to really clean up the code so that chisq
	  -> p is consistently computed, and so that a set of p's is
	  consistently evaluated for the random/nonrandom decision.

* 2004-11-13 [r80]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/chisq.c: This is it, ready to
	  proceed.

* 2004-11-13 [r79]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/kstest.c (added), trunk/dieharder.cvs.time:
	  This checks in a placeholder for a Kolmogorov-Smirnov test,
	  likely to be applied to a vector of p-values.

* 2004-11-13 [r78]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/chisq.c (added):
	  We'll commit this for the moment. I think the sensible thing to
	  do is to create as general as possible a tool for generating
	  Pearson's chisq for discretely binned data, in particular and
	  immediately for the Poissonian birthday histogram but also for
	  other purposes. Note that these routines should not only generate
	  chisq, but when possible go ahead and compute goodness of fit
	  p-values, ideally in a vector associated with independent trials.
	  This vector of p-values can itself then be subjected to a
	  kolmogorov-smirnov analysis and transformed into a conclusion for
	  the generator being tested.

* 2004-11-13 [r76-77]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/diehard_birthdays.c: Just added
	  output of lambda, which is indeed 2 with the parameters given...

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/bits.c,
	  trunk/work.c, trunk/diehard_birthdays.c: This is REALLY CLOSE to
	  having diehard birthdays finished. We just need to add a chisq
	  test for Poisson distributions sampled samples times with known
	  (per sample) lambda, and a loop to convert a table of chisq into
	  a table of p-values. I'm tempted to bump minor and tag, but I
	  shouldn't need to -- I've been really careful and things really
	  look like they're working so far.

* 2004-11-13 [r75]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/Makefile, trunk/dieharder.cvs.time,
	  trunk/diehard_birthdays.c (added): This is a simple checkin prior
	  to doing diehard birthdays test.

* 2004-11-13 [r74]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/confidence.c (added),
	  trunk/dieharder.cvs.time, trunk/diehard_runs.c: This splits off
	  the confidence interval test from STS docs.

* 2004-11-13 [r73]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/dieharder.spec,
	  trunk/dieharder.abs: This is a small adjustment (still in 0.4.1 I
	  guess). Let's try another diehard, I think.

* 2004-11-13 [r72]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/diehard_runs.c:
	  This is actually a fairly functional diehard test! I think that
	  we can actually implement a test for the uniformity of p-values
	  as suggested by NIST to run on TOP of the existing confidence
	  interval test. This would actually break the p-distribution down
	  by interval and return a p-value of its own computed against the
	  assumption of uniformity. Or I could get fancier and try
	  kolmogorov-smirnov, if GSL doesn't have one and I work hard
	  enough to program one. If this is really distinct -- it isn't
	  clear that it is.

* 2004-11-12 [r70]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/diehard_runs.c: This is actually sort of semi-functional.
	  What I >>really<< need now is canned Kolmogorov-Smirnov code.
	  Could it be that this is in the GSL already? I'll be it is...

* 2004-11-11 [r69]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/diehard_runs.c: Continuing to
	  hack this up.

* 2004-11-10 [r68]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/Ntest.c (added),
	  trunk/dieharder.cvs.time, trunk/bits.c, trunk/work.c,
	  trunk/Xtest.c (added), trunk/diehard_runs.c (added): This is a
	  nearly functional diehard_runs -- I just need to figure out what
	  the expected values and sigmas are...

* 2004-11-10 [r67]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/dieharder.abs:
	  This is simply lovely. A nice litte addition to the Makefile that
	  automatically indicates the current version in the abstract. I
	  actually have things fairly distributable!

* 2004-11-10 [r66]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/startup.c, trunk/rgb_bit2.c: OK,
	  added a few minor changes to manage the bits issue yet another
	  way. Really, I'm going to have to figure out a consistent way of
	  indicating whether a test can have size OR bits OR both OR
	  neither specified. Also, it would be really lovely to have
	  another outer loop and to present the lowest p in a set of (say)
	  ten runs of a test combo. Although in many cases running with -s
	  10x larger should do the same thing, really.

* 2004-11-10 [r63-65]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: This is it and running, version 0.4.0
	  as published. Seems to work.

	* trunk/Makefile, trunk/dieharder.php, trunk/dieharder.cvs.time,
	  trunk/dieharder.spec, trunk/dieharder.1, trunk/dieharder.abs: One
	  last checkin, then a tag, then a checkin as published.

* 2004-11-10 [r62]  rgb <rgb@localhost>:

	* trunk/dieharder.php (added), trunk/measure_rate.c,
	  trunk/dieharder.h, trunk/rgb_bitdist.c, trunk/Makefile,
	  trunk/list_rand.c, trunk/sts_runs.c, trunk/sts_monobit.c,
	  trunk/startup.c, trunk/rgb_persist.c, trunk/rgb_binomial.c,
	  trunk/dieharder.abs (added), trunk/rgb_bit2.c: This is about to
	  become version 0.4.0 and be posted under general or some such on
	  my website at Duke.

* 2004-11-10 [r61]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time: This is a tagged
	  release, mostly bugfixes. At the moment it all looks like it
	  works.

* 2004-11-10 [r59]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time, trunk/sts_runs.c,
	  trunk/sts_monobit.c, trunk/random_seed.c, trunk/rgb_binomial.c,
	  trunk/parsecl.c, trunk/rgb_bit2.c: This seems to work perfectly,
	  for the very short moment. It is by no means perfect or mutually
	  exclusive. We very definitely need to generalize the bitdist test
	  to handle bit ntuples of arbitrary length, where the length is a
	  variable. I think I'll retag this. It is also probably time to
	  think about putting this up on the website, especially if I'm
	  going to write a proposal on it.

* 2004-11-09 [r57-58]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/rgb_bit2.c (added): Because it
	  wasn't checked in!

	* trunk/dieharder.cvs.time: Why didn't bit2.c go home?

* 2004-11-09 [r56]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/rgb_bitdist.c,
	  trunk/dieharder.cvs.time, trunk/add_my_types.c, trunk/work.c,
	  trunk/parsecl.c: This is going home with a split out routine and
	  some nice changes that will make it easier to add new tests with
	  arbitrary numbers.

* 2004-11-09 [r54-55]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Just checking repository Root.

	* trunk/dieharder.cvs.time, trunk/parsecl.c: Let's send this
	  home...

* 2004-11-09 [r52-53]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time: OK, fixing Makefile to
	  actually get this home, AND adding the URL of the web reference
	  from the last checkin:
	  http://world.std.com/~franl/crypto/random-numbers.html (we need
	  to implement some of its hyperplane tests).

	* trunk/dieharder.cvs.time, trunk/list_rngs.c, trunk/NOTES,
	  trunk/parsecl.c: We're actually working on this once again. I
	  need to get my own "runs" test working, as it will replace a
	  whole RANGE of STS, and I need to implement a spectral
	  distribution test with bins as is done in the nice web reference
	  I found.

* 2004-11-08 [r51]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/Makefile, trunk/dieharder.cvs.time,
	  trunk/add_my_types.c, trunk/dev_urandom.c (added),
	  trunk/parsecl.c: This adds yet another built-in device to GSL.

* 2003-06-10 [r50]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/empty_random.c
	  (added), trunk/random_seed.c, trunk/add_my_types.c: This adds an
	  "empty" generator to help us determine gsl call overhead
	  separately.

* 2003-01-30 [r49]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/rgb_bitdist.c, trunk/dieharder.cvs.time:
	  This is broken as shit. I see what I did -- I made the ntest
	  evaluation and presentation routines use n+1 bits (because in
	  rgb_binomial I needed to do the end of the binomial). However, I
	  have to fix it later...

* 2003-01-30 [r48]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time: Forgot to send
	  this...

* 2003-01-29 [r47]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c, trunk/dieharder.cvs.time: Not obviously
	  broken, and time to add bitpair counters. Should be really easy
	  -- left-shift in two bits at a time to creat the int index of the
	  counter, then increment it.

* 2003-01-29 [r46]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/NOTES: Some NOTES on future work.

* 2003-01-29 [r45]  rgb <rgb@localhost>:

	* trunk/rgb_bitdist.c (added), trunk/Makefile, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/work.c: This checks in a whole
	  new test, which should probably be combined with sts_monobit (it
	  generates monobit stats as it goes) rgb_persist (one can easily
	  generate a bitmask as one goes) rgb_binomial (one can generate
	  binomial stats on top of monobit as one goes). and possibly with
	  more tests.

* 2003-01-26 [r44]  rgb <rgb@localhost>:

	* trunk/measure_rate.c, trunk/dieharder.cvs.time, trunk/work.c:
	  This last little pair of changes causes measure_rate to use its
	  own, fixed, number of samples ("more than enough"). It also
	  installs a "summary report" mode that isn't horribly useful
	  because of conflict between e.g. -b, -n, -s definitions here and
	  there. Also, different tests need to be run in different ways to
	  demonstrate failure (or a lack thereof).

* 2003-01-26 [r43]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/bits.c,
	  trunk/startup.c, trunk/rgb_persist.c, trunk/rgb_binomial.c: OK,
	  we haven't done TOO much, but we have definitely learned that all
	  the rng's that are weak in rgb_persist will definitely fail the
	  monobit test (for obvious reasons). Furthermore, when a generator
	  is weak in certain bits and we evaluate the bits from the other
	  end (whichever end that might be!) it can often PASS the monobit
	  test. Bits that repeat, random_max's that aren't powers of two-1
	  (and probably EVEN powers of two at that) are going to be
	  trouble!

* 2003-01-26 [r42]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/bits.c, trunk/rgb_persist.c,
	  trunk/NOTES, trunk/parsecl.c: This is a VERY IMPORTANT new test,
	  rgb_persist(), and a very useful new routine, dumpbits(). Read
	  NOTES (and inline comments and output) to see a bit of what it
	  does and why it is important.

* 2003-01-25 [r41]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/bits.c, trunk/rgb_persist.c: This
	  actually works. In fact, it works fabulously. I can directly and
	  fairly powerfully look for bitlevel correlations in the output.

* 2003-01-25 [r40]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/bits.c, trunk/work.c, trunk/rgb_persist.c (added),
	  trunk/rgb_binomial.c, trunk/NOTES: OK, we've learned the hard way
	  that some bits in e.g. boroshi don't change AT ALL, EVER. Which
	  makes it pretty hard to be random, of course. So we're going to
	  invent a new tool -- rgb_persist(), which doesn't (yet) to a
	  formal statistical test. It just is going to dump successive
	  unsigned ints from the rng (bitwise) AND maybe run a string of
	  &'s on the string of ints returned. If they share any 1 bits, the
	  successive &'s will preserve them a LOT longer than permitted by
	  binary flips on the slots. This could be made into a fairly
	  powerful bitlevel sequential correlation test in several ways.
	  We'll investigate them as we go, but one reason to write this now
	  is that I'm not quite convinced that what I'm seeing isn't some
	  sort of bug in the get_bit() routine or the like.

* 2003-01-25 [r39]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/sts_runs.c,
	  trunk/sts_monobit.c, trunk/bits.c, trunk/prob.c,
	  trunk/rgb_binomial.c, trunk/NOTES, trunk/parsecl.c: This is well
	  on the way to being MUCH better, and ready to systematically
	  extend.

* 2003-01-25 [r36-38]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: And now we send the tagged package to
	  Duke.

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/NOTES: Checking
	  in the notes.

* 2003-01-24 [r35]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/sts_runs.c,
	  trunk/sts_monobit.c, trunk/bits.c: This is worth a minor bump.
	  First, we fixed get_bit(). Second, we completed sts_runs (for
	  what it is worth, which isn't a whole lot as nearly everything
	  that fails it also fails monobit and binomial as expected).
	  However, working through it suggests how to make binomial work
	  better. Next (to make it easier to check results relative to the
	  sts documents) I need to implement -b (get_bit(0 permits this
	  pretty much transparently, at least in the sts routines) and
	  implement a -f filename filled with e.g. raw bitstrings or ascii
	  floats or binary numbers in xmlish wrappers that indicate the
	  storage mechanism? Thus I can test explicit short bitstrings
	  against the explicit sts numbers to be sure that my erfc and
	  conversions (and sometimes slightly different implementation)
	  yield the same answers as theirs, except where I don't care
	  because I think theirs are (basically) wrong. See also NOTES
	  (about to be checked in) for a fairly detailed beginning critique
	  of sts, which I don't think is particularly strong or useful,
	  really.

* 2003-01-24 [r34]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/sts_monobit.c, trunk/sts_runs.c,
	  trunk/bits.c: This is my home-grown version of sts_runs. It is no
	  better than the actual sts version, really, but the sts version
	  is not terribly good. I'm going to add a (hopefully vastly
	  improved) binomial version of the test to rgb_binomial, where I
	  can do all the tests at once with a single set of code and
	  multiple trials (random number seeds).

* 2003-01-23 [r33]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/Makefile, trunk/dieharder.cvs.time,
	  trunk/sts_runs.c (added), trunk/work.c, trunk/NOTES: Just adding
	  some notes, and preparing to add the next sts test, TOMORROW.

* 2003-01-23 [r30-32]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: I have no idea why the tag went down
	  into fitany...

	* trunk/Makefile, trunk/dieharder.cvs.time, trunk/parsecl.c: This
	  ups the minor revision number to 0.3.0. Worthwhile because now I
	  have BOTH an erfc AND a Q evaluation of p-value. I could
	  certainly prettify sts_monobit, but since I generally think that
	  it isn't that great a test (although it does indicate how starkly
	  many rng's FAIL to be even this random) I won't do so right away.
	  Next (after tagging and resync'ing) is going to be adding more
	  tests. At this point adding a test should be pretty easy, given
	  the hopefully reusable routines I have written to do the pre- and
	  post- processing. All I really have to do is input the expected
	  values, write a loop to generate the "experimental" statistic,
	  and pass everything on to a standard set of tools for outputting
	  the results and deciding on the quality of the results.

* 2003-01-23 [r29]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/sts_monobit.c,
	  trunk/bits.c, trunk/startup.c, trunk/rgb_binomial.c: All right,
	  this LOOKS like it correctly implements the STS monobit frequency
	  test. I would still claim that anything that fails this test will
	  also fail the binomial test, and that in addition things that
	  pass it (e.g. the vax rng) FAIL the binomial test, so the monobit
	  test is a waste of time and more prone to error. However, mine is
	  not to reason why...

* 2003-01-22 [r28]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/bits.c,
	  trunk/prob.c, trunk/rgb_binomial.c: This is working incredibly
	  well, and I've split off nearly everything required to make
	  further n-point chisq tests trivial to implement and assess. All
	  that remains is to do a 1-point (normal) test such as the
	  sts_monobit test (which should really be done internal to the
	  rgb_binomial test and may one day be, but for the moment we'll
	  just do it directly).

* 2003-01-22 [r27]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Just making SURE this is at Duke...

* 2003-01-21 [r26]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/bits.c,
	  trunk/rgb_binomial.c: This works just lovely! HOWEVER, it is also
	  clear that running it once, twice, three times, for EACH
	  generator looking for good ones is a PITA. We'll have to
	  eventually rearrange this so that there is a "search mode" that
	  runs a loop through all known generators, identifying the ones
	  that pass at least at the 1% or higher level. BTW, I'm now
	  prepared to bet a nickel that the rgb binomial test has a great
	  deal of sensitivity, since it fails all but literally three or
	  four of the available RNG's for absurdly short data strings. As
	  in they aren't even APPROXIMATELY random...NONE of them. If one
	  used them to generate a humble binomial distribution numerically
	  it would be in significant error. I do need to alter this test so
	  that I can run it for arbitrary bit string lengths, but for the
	  moment I'm not going to worry about it.

* 2003-01-21 [r25]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/bits.c (added), trunk/work.c, trunk/rgb_binomial.c: This is
	  now VERY CLOSE. I should be able to determine chisq in a matter
	  of minutes when I return...

* 2003-01-21 [r24]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/dieharder.cvs.time, trunk/parsecl.c:
	  This is considerably cleaner and more decrufted...

* 2003-01-21 [r23]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/Makefile, trunk/dieharder.cvs.time,
	  trunk/list_rand.c, trunk/work.c, trunk/startup.c,
	  trunk/list_rngs.c: This finishes the split off of list_rand and
	  list_rngs from the code. I do need to "fix" the Usage() routine
	  to reflect the change.

* 2003-01-21 [r22]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/list_rand.c (added), trunk/work.c, trunk/startup.c,
	  trunk/prob.c, trunk/list_rngs.c (added), trunk/parsecl.c:
	  Breaking things up into subroutines a bit better to clarify the
	  program structure.

* 2003-01-17 [r21]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/prob.c (added), trunk/rgb_binomial.c (added): This is
	  coming along, although I'm silly for not just finishing the
	  monobit test before introducing a binomial test. Still, all very
	  instructive. I need to get all this on my laptop and take it with
	  me, along with the notebook.

* 2003-01-17 [r20]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/sts_monobit.c, trunk/showrand.sm,
	  trunk/startup.c: Fixes a nasty bug in sts_monobit, which I think
	  I'm gonna rename rgb_binomial (and screw sts's monobit test,
	  which is immensely sloppy compared to actually systematically
	  exploring the binomial distribution of 1's and 0's in the overall
	  bit strings generated by different seeds. Actually, a better
	  thing still is to leave sts_monobit, but add rgb_binomial and
	  document that it is more sensitive (in particular, that e.g.
	  alternating series that easily pass monobit fail binomial, and
	  that NOTHING that fails monobit will PASS binomial).

* 2003-01-17 [r17-19]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Sending off the tag

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/sts_monobit.c (added), trunk/work.c: OK, this is good for a
	  full minor number bump to 0.2.0. We have basically installed the
	  guts of the STS monobit test. All that we lack is the computation
	  of the statistics and p-value, which should be fairly
	  straightforward, especially with the gsl handy. I SHOULD be able
	  to just cumulate the one-count (e.g.) in a vector and hand it to
	  the gsl stats routines and have mean, stddev, skew, kurtosis, and
	  anything else I might like just handed back to me...

* 2003-01-17 [r16]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/default.sm (added),
	  trunk/showrand.sm, trunk/startup.c, trunk/NOTES: Just a bit of
	  cleanup, and some moderately important additions. Now we REALLY
	  need to think about tests.

* 2003-01-17 [r13-15]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Tagged.

	* trunk/measure_rate.c, trunk/Makefile, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/add_my_types.c, trunk/startup.c:
	  This is about ready for a semipermanent snapshot, so I bumped the
	  minor version number. I'd say that we are now "good" with the
	  ability to add sw rng's, including interfaces to hw rng's square
	  within the gsl format. Now to give de old tests a try...

* 2003-01-17 [r12]  rgb <rgb@localhost>:

	* trunk/Makefile, trunk/dieharder.h, trunk/dieharder.cvs.time,
	  trunk/dev_random.c (added), trunk/add_my_types.c, trunk/work.c,
	  trunk/startup.c, trunk/my_gsl_rng.h (removed), trunk/dieharder.c:
	  Hot diggity dawg! It works! However, I don't need types.c. All I
	  need is to follow the dev_random.c template and call a routine
	  add_my_rngs() (to be defined) before working with gsl's rng's,
	  and keep track (crudely) of which ones are which. So this can be
	  decrufted a bit and then reorganized now that I know how it
	  works.

* 2003-01-17 [r11]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time, trunk/add_my_types.c (added),
	  trunk/my_gsl_rng.h (added): We'll try these as the basic wrappers
	  required. With luck we'll override the types subroutine in gsl
	  itself, although I do have my doubts...

* 2003-01-17 [r10]  rgb <rgb@localhost>:

	* trunk/dieharder.h, trunk/measure_rate.c,
	  trunk/dieharder.cvs.time, trunk/startup.c, trunk/parsecl.c: This
	  significantly improves the Usage and cl parsing, and
	  pre-structures it for addition of sts/diehard tests. We still
	  need to see if we can gsl-wrap our own tests without a full gsl
	  recompile.

* 2003-01-16 [r6-9]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: Sending the tagged copy home...

	* trunk/Makefile, trunk/dieharder.cvs.time: This is now going to be
	  v_0_1_0.

	* trunk/measure_rate.c, trunk/dieharder.h,
	  trunk/dieharder.cvs.time: This is now functional UP TO all the
	  gsl rngs, not any of the add-ons. Which is fine, as we'll
	  probably completely change how the add-ons work. Next, we need to
	  do all of the following, in some order: a) figure out how to wrap
	  up new gsl_rngs, preferrably without recompiling the whole damn
	  library. b) decruft all the command line options and
	  no-longer-used variables. c) add back command line options for
	  doing quality tests. Start with the very simplest test --
	  something from diehard or the bits test from sts. d) In the
	  meantime, increment revision, tag, and consider "publishing" as
	  we go.

* 2003-01-16 [r4-5]  rgb <rgb@localhost>:

	* trunk/dieharder.cvs.time: This SHOULD split rand_rate off so it
	  has its own CVS tree outside of the "random" project overall,
	  which I think is for the best.

	* trunk/measure_rate.c, trunk/dieharder.h,
	  trunk/dieharder.cvs.time, trunk/startup.c, trunk/parsecl.c: This
	  actually works, and needs to be saved in snapshot form. I'm not
	  at ALL certain that I'm getting accurate measurements in terms of
	  the number of rands per second I can generate, but this too, we
	  shall see...

* 2003-01-13 [r3]  rgb <rgb@localhost>:

	* trunk/measure_rate.c, trunk/dieharder.h, trunk/Makefile,
	  trunk/dieharder.cvs.time, trunk/random_seed.c (added),
	  trunk/startup.c, trunk/work.c, trunk/dieharder.c, trunk/NOTES,
	  trunk/timing.c, trunk/parsecl.c: This is a fair amount of
	  progress to having something working...

* 2003-01-12 [r2]  rgb <rgb@localhost>:

	* trunk/measure_rate.c (added), trunk/README (added),
	  trunk/copyright.h (added), trunk/showrand.sm (added),
	  trunk/work.c (added), trunk/dieharder.c (added), trunk/timing.c
	  (added), trunk/COPYING (added), trunk/parsecl.c (added),
	  trunk/dieharder.h (added), trunk/Makefile (added),
	  trunk/dieharder.cvs.time (added), trunk/dieharder.spec (added),
	  trunk/startup.c (added), trunk/dieharder.1 (added), trunk/NOTES
	  (added): This is basically the original checkin for my
	  lookin-major random number project. By the time this is done, I'd
	  doggone better have a paper or two out of it, if not more.

* 2003-01-12 [r1]  anonymous <anonymous@localhost>:

	* trunk (added), branches (added), tags (added): New repository
	  initialized by cvs2svn.

